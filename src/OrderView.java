/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package User;

import static User.ServiceMarket.jLabelUserId;
import com.sun.javafx.webkit.theme.Renderer;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URI;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author Erol
 */
public class OrderView extends javax.swing.JPanel {

    private Connection conn = null;
    private final String url = "jdbc:mysql://localhost:3306/";
    private final String dbName = "database";
    private final String driver = "com.mysql.jdbc.Driver";
    private final String userName = "root";
    private final String password = "Amureeha";
    private ResultSet res;
    public String databaseTable = "select * from service";
    public DefaultTableModel table;

    /**
     * Creates new form ServiceMarketAuto
     */
    public OrderView() {
        initComponents();
        secontinitComponent();
        // LabelAnimation.setVisible(false);
        dbConnection();

    }

    public Statement startConnection() throws Exception {
        Class.forName(driver).newInstance();
        conn = DriverManager.getConnection(url + dbName, userName, password);
        return conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    }

    public Statement startConnection(String dbName) throws Exception {
        Class.forName(driver).newInstance();
        conn = DriverManager.getConnection(url + dbName, userName, password);
        return conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    }

    public void stopConnection() throws Exception {
        conn.close();
        dbConnection();
        fillServiceList();
    }

    public void dbConnection() {
        Statement st;
        try {

            st = startConnection();
            res = st.executeQuery(databaseTable);

        } catch (Exception ex) {
            JOptionPane.showConfirmDialog(null, "DataBaseConnection Error", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
        }
    }

    public void fillServiceList() {

        DefaultListModel m = new DefaultListModel();
        m.addElement("All");

        try {
            PreparedStatement pst = conn.prepareStatement("Select * from database.service group by type");
            res = pst.executeQuery();

            while (res.next()) {
                String services = res.getString("type");
                m.addElement(services);
            }
            jList1.setModel(m);

        } catch (Exception e) {
            JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabelUserId = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex)
            {
                return false;
            }

            public Component prepareRenderer(TableCellRenderer renderer,int Index_row, int Index_col) {
                Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
                //even index, selected or not selected

                if(isCellSelected(Index_row, Index_col)){
                    comp.setBackground(Color.orange);
                }

                else if  (  Index_row % 2 == 0 ) {
                    comp.setBackground(Color.lightGray);
                }
                else {
                    comp.setBackground(Color.getHSBColor( 0xF5, 0xF5, 0xF5));
                }
                return comp;
            }

        }
        ;
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jPanelInfo4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabelIdNumber4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabelType = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabelCost = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabelDuration = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabelQualÄ±ty = new javax.swing.JLabel();
        jLabelQuality = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabelCompany = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabelCountry = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabelCity = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabelLink = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanelInfo5 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabelIdNumber5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabelCost1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jLabelCompany1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabelUserId.setText("jLabel4");

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Services Type", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jList1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("The Best Price");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11"
            }
        ));
        jTable2.setEditingColumn(0);
        jTable2.setEditingRow(0);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jList2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selected", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jScrollPane4.setViewportView(jList2);

        jPanelInfo4.setBackground(new java.awt.Color(204, 204, 204));
        jPanelInfo4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        jPanel9.setBackground(new java.awt.Color(153, 153, 255));
        jPanel9.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel9.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/id.png"))); // NOI18N
        jLabel6.setText("Id Number");

        jLabelIdNumber4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelIdNumber4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 213, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jLabelIdNumber4)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));
        jPanel3.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel3.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/type.png"))); // NOI18N
        jLabel21.setText("Type");

        jLabelType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jLabelType))
                .addGap(0, 239, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelType)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(153, 153, 255));
        jPanel4.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel4.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/license1.png"))); // NOI18N
        jLabel24.setText("Name");

        jLabelName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel24)
                .addGap(0, 236, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelName)
                .addContainerGap())
        );

        jPanel15.setBackground(new java.awt.Color(235, 195, 27));
        jPanel15.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel15.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/price4.png"))); // NOI18N
        jLabel13.setText("Cost");

        jLabelCost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(0, 241, Short.MAX_VALUE))
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCost)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCost)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(235, 195, 27));
        jPanel1.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel1.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/clock4.png"))); // NOI18N
        jLabel14.setText("Duration");

        jLabelDuration.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addGap(0, 222, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDuration)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDuration)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(235, 195, 27));
        jPanel10.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel10.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelQualÄ±ty.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/five19.png"))); // NOI18N
        jLabelQualÄ±ty.setText("Quality");

        jLabelQuality.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabelQualÄ±ty)
                .addGap(0, 229, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelQuality)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabelQualÄ±ty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelQuality)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(0, 204, 102));
        jPanel11.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel11.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/factory6.png"))); // NOI18N
        jLabel16.setText("Company");

        jLabelCompany.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addGap(0, 218, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCompany)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCompany)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(0, 204, 102));
        jPanel12.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel12.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/world91.png"))); // NOI18N
        jLabel17.setText("Country");

        jLabelCountry.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(0, 224, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCountry)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCountry)
                .addContainerGap())
        );

        jPanel13.setBackground(new java.awt.Color(0, 204, 102));
        jPanel13.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel13.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/city8.png"))); // NOI18N
        jLabel18.setText("City");

        jLabelCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jLabel18)
                .addGap(0, 208, Short.MAX_VALUE))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCity)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCity)
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(153, 153, 153));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/link5.png"))); // NOI18N
        jLabel19.setText("Link");

        jLabelLink.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/go.png"))); // NOI18N
        jButton2.setText("Go to Service");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addComponent(jLabelLink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelLink)
                .addContainerGap())
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel19)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelInfo4Layout = new javax.swing.GroupLayout(jPanelInfo4);
        jPanelInfo4.setLayout(jPanelInfo4Layout);
        jPanelInfo4Layout.setHorizontalGroup(
            jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelInfo4Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInfo4Layout.createSequentialGroup()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInfo4Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanelInfo4Layout.setVerticalGroup(
            jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setText("Clear");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jPanelInfo5.setBackground(new java.awt.Color(204, 204, 204));
        jPanelInfo5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        jPanel16.setBackground(new java.awt.Color(153, 153, 255));
        jPanel16.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel16.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelIdNumber5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Services Cost : -");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabelIdNumber5)
                        .addGap(0, 243, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addGap(0, 8, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIdNumber5))
                .addContainerGap())
        );

        jPanel17.setBackground(new java.awt.Color(235, 195, 27));
        jPanel17.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel17.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelCost1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Transportations Cost : -");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabelCost1)
                        .addGap(0, 243, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCost1)
                .addContainerGap())
        );

        jPanel19.setBackground(new java.awt.Color(0, 204, 102));
        jPanel19.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel19.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelCompany1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Total Cost : -");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabelCompany1)
                        .addGap(0, 243, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCompany1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelInfo5Layout = new javax.swing.GroupLayout(jPanelInfo5);
        jPanelInfo5.setLayout(jPanelInfo5Layout);
        jPanelInfo5Layout.setHorizontalGroup(
            jPanelInfo5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfo5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelInfo5Layout.setVerticalGroup(
            jPanelInfo5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInfo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelInfo5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton1)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInfo5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanelInfo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    DefaultListModel listModel2 = new DefaultListModel();


    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked

        if (evt.getClickCount() == 2) {
            String selectedService = jList1.getSelectedValue().toString();

            listModel2.addElement(selectedService);

            jList2.setModel(listModel2);
        }


    }//GEN-LAST:event_jList1MouseClicked

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {

        if (evt.getClickCount() == 2) {
            String selectedService = jList2.getSelectedValue().toString();
            listModel2.removeElement(selectedService);
            jList2.setModel(listModel2);
        }
    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        fillServiceList();
    }//GEN-LAST:event_formMouseEntered


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // LoadAnimeClass lac = new LoadAnimeClass();
        table = (DefaultTableModel) jTable2.getModel();
        jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable2.setRowSelectionAllowed(true);
        jTable2.setFocusable(false);

        table.setRowCount(0);

        int ElementCount = jList2.getModel().getSize();
        ArrayList elementsItems = new ArrayList();

        if (ElementCount == 0) {
            jLabel1.setText("Services Cost : -");
            jLabel2.setText("Transportations Cost : -");
            jLabel3.setText("Total Cost : -");
        }

        if (ElementCount == 1) {

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }
                String type1 = elementsItems.get(0).toString();

                if (jRadioButton1.isSelected()) {
                    PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type1 + "' order by cost ");
                    res = pst.executeQuery();
                }
//                if (jRadioButton2.isSelected()) {
//                    PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type1 + "' order by quality desc ");
//                    res = pst.executeQuery();
//                }
//                if (jRadioButton3.isSelected()) {
//                    PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type1 + "' order by duration ");
//                    res = pst.executeQuery();
//                }

                int i = 0;

                while (res.next()) {
                    String idnumber = res.getString("idnumber");
                    String link = res.getString("link");
                    String type = res.getString("type");
                    String name = res.getString("name");
                    String cost = res.getString("cost");
                    String duration = res.getString("duration");
                    String quality = res.getString("quality");
                    String company = res.getString("company");
                    String country = res.getString("country");
                    String city = res.getString("city");
                    String locationFactor = res.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                    if (i == 1) {
                        break;
                    }

                }

            } catch (Exception e) {
                JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
            }
        }

        if (ElementCount == 2) {
            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            int[] importantValues = new int[3];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }
                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    importantValues = calculateMin2(costAndLocfacList1, costAndLocfacList2);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }
            int var1 = importantValues[0];
            int var2 = importantValues[1];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            try {
                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();

                String query = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(query);
                ResultSet res1 = pst1.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i % 2 == 1 && i < 2) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }

        if (ElementCount == 3) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            int[] importantValues = new int[4];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }
                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    importantValues = calculateMin3(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = importantValues[0];
            int var2 = importantValues[1];
            int var3 = importantValues[2];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

//            Select * from database.transportation where (startDestination = 'Stockholm' or startDestination='Izmir') and (nextDestination='Izmir' or nextDestination='Stockholm')
                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }
        }

        if (ElementCount == 4) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            ArrayList idList4 = new ArrayList();
            ArrayList locFacList4 = new ArrayList();
            ArrayList costList4 = new ArrayList();
            ArrayList costAndLocfacList4 = new ArrayList();
            ArrayList cityList4 = new ArrayList();
            ArrayList qualityList4 = new ArrayList();
            ArrayList durationList4 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            int[] importantValues = new int[5];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }
                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                type = elementsItems.get(3).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();

                while (res.next()) {
                    idList4.add(res.getString("idnumber"));
                    locFacList4.add(res.getString("locationfactor"));
                    costList4.add(res.getString("cost"));
                    cityList4.add(res.getString("city"));
                    qualityList4.add(res.getString("quality"));
                    durationList4.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    for (int l = 0; l < costList4.size(); l++) {
                        int sumValue = Integer.parseInt(locFacList4.get(l).toString()) + Integer.parseInt(costList4.get(l).toString());
                        costAndLocfacList4.add(sumValue);
                    }

                    importantValues = calculateMin4(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3, costAndLocfacList4);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = importantValues[0];
            int var2 = importantValues[1];
            int var3 = importantValues[2];
            int var4 = importantValues[3];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            int idnumber4 = Integer.parseInt(idList4.get(var4).toString());
            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

                PreparedStatement pstD = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber4 + "'");
                ResultSet resD = pstD.executeQuery();

//            Select * from database.transportation where (startDestination = 'Stockholm' or startDestination='Izmir') and (nextDestination='Izmir' or nextDestination='Stockholm')
                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();
                String cty4 = cityList4.get(var4).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                String transport3 = "SELECT * FROM database.transportation where (startDestination = '" + cty3 + "'" + " or startDestination = '" + cty4 + "') and (nextDestination = '" + cty3 + "' or"
                        + " nextDestination = '" + cty4 + "')";
                PreparedStatement pst3 = conn.prepareStatement(transport3);
                ResultSet res3 = pst3.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 5) {
                    while (res3.next()) {
                        String transportationId = res3.getString("transportationId");
                        String transportationCost = res3.getString("transportationCost");
                        String startDestination = res3.getString("startDestination");
                        String nextDestination = res3.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resD.next()) {
                    String idnumber = resD.getString("idnumber");
                    String link = resD.getString("link");
                    String type = resD.getString("type");
                    String name = resD.getString("name");
                    String cost = resD.getString("cost");
                    String duration = resD.getString("duration");
                    String quality = resD.getString("quality");
                    String company = resD.getString("company");
                    String country = resD.getString("country");
                    String city = resD.getString("city");
                    String locationFactor = resD.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }

        if (ElementCount == 5) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            ArrayList idList4 = new ArrayList();
            ArrayList locFacList4 = new ArrayList();
            ArrayList costList4 = new ArrayList();
            ArrayList costAndLocfacList4 = new ArrayList();
            ArrayList cityList4 = new ArrayList();
            ArrayList qualityList4 = new ArrayList();
            ArrayList durationList4 = new ArrayList();

            ArrayList idList5 = new ArrayList();
            ArrayList locFacList5 = new ArrayList();
            ArrayList costList5 = new ArrayList();
            ArrayList costAndLocfacList5 = new ArrayList();
            ArrayList cityList5 = new ArrayList();
            ArrayList qualityList5 = new ArrayList();
            ArrayList durationList5 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            int[] importantValues = new int[6];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }

                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                type = elementsItems.get(3).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList4.add(res.getString("idnumber"));
                    locFacList4.add(res.getString("locationfactor"));
                    costList4.add(res.getString("cost"));
                    cityList4.add(res.getString("city"));
                    qualityList4.add(res.getString("quality"));
                    durationList4.add(res.getString("duration"));
                }

                type = elementsItems.get(4).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList5.add(res.getString("idnumber"));
                    locFacList5.add(res.getString("locationfactor"));
                    costList5.add(res.getString("cost"));
                    cityList5.add(res.getString("city"));
                    qualityList5.add(res.getString("quality"));
                    durationList5.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    for (int l = 0; l < costList4.size(); l++) {
                        int sumValue = Integer.parseInt(locFacList4.get(l).toString()) + Integer.parseInt(costList4.get(l).toString());
                        costAndLocfacList4.add(sumValue);
                    }

                    for (int m = 0; m < costList5.size(); m++) {
                        int sumValue = Integer.parseInt(locFacList5.get(m).toString()) + Integer.parseInt(costList5.get(m).toString());
                        costAndLocfacList5.add(sumValue);
                    }

                    importantValues = calculateMin5(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3, costAndLocfacList4, costAndLocfacList5);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = importantValues[0];
            int var2 = importantValues[1];
            int var3 = importantValues[2];
            int var4 = importantValues[3];
            int var5 = importantValues[4];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            int idnumber4 = Integer.parseInt(idList4.get(var4).toString());
            int idnumber5 = Integer.parseInt(idList5.get(var5).toString());
            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

                PreparedStatement pstD = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber4 + "'");
                ResultSet resD = pstD.executeQuery();

                PreparedStatement pstE = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber5 + "'");
                ResultSet resE = pstE.executeQuery();

                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();
                String cty4 = cityList4.get(var4).toString();
                String cty5 = cityList5.get(var5).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                String transport3 = "SELECT * FROM database.transportation where (startDestination = '" + cty3 + "'" + " or startDestination = '" + cty4 + "') and (nextDestination = '" + cty3 + "' or"
                        + " nextDestination = '" + cty4 + "')";
                PreparedStatement pst3 = conn.prepareStatement(transport3);
                ResultSet res3 = pst3.executeQuery();

                String transport4 = "SELECT * FROM database.transportation where (startDestination = '" + cty4 + "'" + " or startDestination = '" + cty5 + "') and (nextDestination = '" + cty4 + "' or"
                        + " nextDestination = '" + cty5 + "')";
                PreparedStatement pst4 = conn.prepareStatement(transport4);
                ResultSet res4 = pst4.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 5) {
                    while (res3.next()) {
                        String transportationId = res3.getString("transportationId");
                        String transportationCost = res3.getString("transportationCost");
                        String startDestination = res3.getString("startDestination");
                        String nextDestination = res3.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resD.next()) {
                    String idnumber = resD.getString("idnumber");
                    String link = resD.getString("link");
                    String type = resD.getString("type");
                    String name = resD.getString("name");
                    String cost = resD.getString("cost");
                    String duration = resD.getString("duration");
                    String quality = resD.getString("quality");
                    String company = resD.getString("company");
                    String country = resD.getString("country");
                    String city = resD.getString("city");
                    String locationFactor = resD.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 7) {
                    while (res4.next()) {
                        String transportationId = res4.getString("transportationId");
                        String transportationCost = res4.getString("transportationCost");
                        String startDestination = res4.getString("startDestination");
                        String nextDestination = res4.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resE.next()) {
                    String idnumber = resE.getString("idnumber");
                    String link = resE.getString("link");
                    String type = resE.getString("type");
                    String name = resE.getString("name");
                    String cost = resE.getString("cost");
                    String duration = resE.getString("duration");
                    String quality = resE.getString("quality");
                    String company = resE.getString("company");
                    String country = resE.getString("country");
                    String city = resE.getString("city");
                    String locationFactor = resE.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }

        if (ElementCount == 6) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            ArrayList idList4 = new ArrayList();
            ArrayList locFacList4 = new ArrayList();
            ArrayList costList4 = new ArrayList();
            ArrayList costAndLocfacList4 = new ArrayList();
            ArrayList cityList4 = new ArrayList();
            ArrayList qualityList4 = new ArrayList();
            ArrayList durationList4 = new ArrayList();

            ArrayList idList5 = new ArrayList();
            ArrayList locFacList5 = new ArrayList();
            ArrayList costList5 = new ArrayList();
            ArrayList costAndLocfacList5 = new ArrayList();
            ArrayList cityList5 = new ArrayList();
            ArrayList qualityList5 = new ArrayList();
            ArrayList durationList5 = new ArrayList();

            ArrayList idList6 = new ArrayList();
            ArrayList locFacList6 = new ArrayList();
            ArrayList costList6 = new ArrayList();
            ArrayList costAndLocfacList6 = new ArrayList();
            ArrayList cityList6 = new ArrayList();
            ArrayList qualityList6 = new ArrayList();
            ArrayList durationList6 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            int[] importantValues = new int[7];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }

                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                type = elementsItems.get(3).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList4.add(res.getString("idnumber"));
                    locFacList4.add(res.getString("locationfactor"));
                    costList4.add(res.getString("cost"));
                    cityList4.add(res.getString("city"));
                    qualityList4.add(res.getString("quality"));
                    durationList4.add(res.getString("duration"));
                }

                type = elementsItems.get(4).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList5.add(res.getString("idnumber"));
                    locFacList5.add(res.getString("locationfactor"));
                    costList5.add(res.getString("cost"));
                    cityList5.add(res.getString("city"));
                    qualityList5.add(res.getString("quality"));
                    durationList5.add(res.getString("duration"));
                }

                type = elementsItems.get(5).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList6.add(res.getString("idnumber"));
                    locFacList6.add(res.getString("locationfactor"));
                    costList6.add(res.getString("cost"));
                    cityList6.add(res.getString("city"));
                    qualityList6.add(res.getString("quality"));
                    durationList6.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    for (int l = 0; l < costList4.size(); l++) {
                        int sumValue = Integer.parseInt(locFacList4.get(l).toString()) + Integer.parseInt(costList4.get(l).toString());
                        costAndLocfacList4.add(sumValue);
                    }

                    for (int m = 0; m < costList5.size(); m++) {
                        int sumValue = Integer.parseInt(locFacList5.get(m).toString()) + Integer.parseInt(costList5.get(m).toString());
                        costAndLocfacList5.add(sumValue);
                    }

                    for (int n = 0; n < costList6.size(); n++) {
                        int sumValue = Integer.parseInt(locFacList6.get(n).toString()) + Integer.parseInt(costList6.get(n).toString());
                        costAndLocfacList6.add(sumValue);
                    }

                    importantValues = calculateMin6(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3, costAndLocfacList4, costAndLocfacList5, costAndLocfacList6);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = importantValues[0];
            int var2 = importantValues[1];
            int var3 = importantValues[2];
            int var4 = importantValues[3];
            int var5 = importantValues[4];
            int var6 = importantValues[5];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            int idnumber4 = Integer.parseInt(idList4.get(var4).toString());
            int idnumber5 = Integer.parseInt(idList5.get(var5).toString());
            int idnumber6 = Integer.parseInt(idList6.get(var6).toString());

            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

                PreparedStatement pstD = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber4 + "'");
                ResultSet resD = pstD.executeQuery();

                PreparedStatement pstE = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber5 + "'");
                ResultSet resE = pstE.executeQuery();

                PreparedStatement pstF = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber6 + "'");
                ResultSet resF = pstF.executeQuery();

                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();
                String cty4 = cityList4.get(var4).toString();
                String cty5 = cityList5.get(var5).toString();
                String cty6 = cityList6.get(var6).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                String transport3 = "SELECT * FROM database.transportation where (startDestination = '" + cty3 + "'" + " or startDestination = '" + cty4 + "') and (nextDestination = '" + cty3 + "' or"
                        + " nextDestination = '" + cty4 + "')";
                PreparedStatement pst3 = conn.prepareStatement(transport3);
                ResultSet res3 = pst3.executeQuery();

                String transport4 = "SELECT * FROM database.transportation where (startDestination = '" + cty4 + "'" + " or startDestination = '" + cty5 + "') and (nextDestination = '" + cty4 + "' or"
                        + " nextDestination = '" + cty5 + "')";
                PreparedStatement pst4 = conn.prepareStatement(transport4);
                ResultSet res4 = pst4.executeQuery();

                String transport5 = "SELECT * FROM database.transportation where (startDestination = '" + cty5 + "'" + " or startDestination = '" + cty6 + "') and (nextDestination = '" + cty5 + "' or"
                        + " nextDestination = '" + cty6 + "')";
                PreparedStatement pst5 = conn.prepareStatement(transport5);
                ResultSet res5 = pst5.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

//                        Object[] obj = new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps};
//                        table.addRow(obj);
//         
                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 5) {
                    while (res3.next()) {
                        String transportationId = res3.getString("transportationId");
                        String transportationCost = res3.getString("transportationCost");
                        String startDestination = res3.getString("startDestination");
                        String nextDestination = res3.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resD.next()) {
                    String idnumber = resD.getString("idnumber");
                    String link = resD.getString("link");
                    String type = resD.getString("type");
                    String name = resD.getString("name");
                    String cost = resD.getString("cost");
                    String duration = resD.getString("duration");
                    String quality = resD.getString("quality");
                    String company = resD.getString("company");
                    String country = resD.getString("country");
                    String city = resD.getString("city");
                    String locationFactor = resD.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 7) {
                    while (res4.next()) {
                        String transportationId = res4.getString("transportationId");
                        String transportationCost = res4.getString("transportationCost");
                        String startDestination = res4.getString("startDestination");
                        String nextDestination = res4.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resE.next()) {
                    String idnumber = resE.getString("idnumber");
                    String link = resE.getString("link");
                    String type = resE.getString("type");
                    String name = resE.getString("name");
                    String cost = resE.getString("cost");
                    String duration = resE.getString("duration");
                    String quality = resE.getString("quality");
                    String company = resE.getString("company");
                    String country = resE.getString("country");
                    String city = resE.getString("city");
                    String locationFactor = resE.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 9) {
                    while (res5.next()) {
                        String transportationId = res5.getString("transportationId");
                        String transportationCost = res5.getString("transportationCost");
                        String startDestination = res5.getString("startDestination");
                        String nextDestination = res5.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resF.next()) {
                    String idnumber = resF.getString("idnumber");
                    String link = resF.getString("link");
                    String type = resF.getString("type");
                    String name = resF.getString("name");
                    String cost = resF.getString("cost");
                    String duration = resF.getString("duration");
                    String quality = resF.getString("quality");
                    String company = resF.getString("company");
                    String country = resF.getString("country");
                    String city = resF.getString("city");
                    String locationFactor = resF.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }
        if (ElementCount == 7) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            ArrayList idList4 = new ArrayList();
            ArrayList locFacList4 = new ArrayList();
            ArrayList costList4 = new ArrayList();
            ArrayList costAndLocfacList4 = new ArrayList();
            ArrayList cityList4 = new ArrayList();
            ArrayList qualityList4 = new ArrayList();
            ArrayList durationList4 = new ArrayList();

            ArrayList idList5 = new ArrayList();
            ArrayList locFacList5 = new ArrayList();
            ArrayList costList5 = new ArrayList();
            ArrayList costAndLocfacList5 = new ArrayList();
            ArrayList cityList5 = new ArrayList();
            ArrayList qualityList5 = new ArrayList();
            ArrayList durationList5 = new ArrayList();

            ArrayList idList6 = new ArrayList();
            ArrayList locFacList6 = new ArrayList();
            ArrayList costList6 = new ArrayList();
            ArrayList costAndLocfacList6 = new ArrayList();
            ArrayList cityList6 = new ArrayList();
            ArrayList qualityList6 = new ArrayList();
            ArrayList durationList6 = new ArrayList();

            ArrayList idList7 = new ArrayList();
            ArrayList locFacList7 = new ArrayList();
            ArrayList costList7 = new ArrayList();
            ArrayList costAndLocfacList7 = new ArrayList();
            ArrayList cityList7 = new ArrayList();
            ArrayList qualityList7 = new ArrayList();
            ArrayList durationList7 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            int[] importantValues = new int[8];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }

                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                type = elementsItems.get(3).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList4.add(res.getString("idnumber"));
                    locFacList4.add(res.getString("locationfactor"));
                    costList4.add(res.getString("cost"));
                    cityList4.add(res.getString("city"));
                    qualityList4.add(res.getString("quality"));
                    durationList4.add(res.getString("duration"));
                }

                type = elementsItems.get(4).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList5.add(res.getString("idnumber"));
                    locFacList5.add(res.getString("locationfactor"));
                    costList5.add(res.getString("cost"));
                    cityList5.add(res.getString("city"));
                    qualityList5.add(res.getString("quality"));
                    durationList5.add(res.getString("duration"));
                }

                type = elementsItems.get(5).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList6.add(res.getString("idnumber"));
                    locFacList6.add(res.getString("locationfactor"));
                    costList6.add(res.getString("cost"));
                    cityList6.add(res.getString("city"));
                    qualityList6.add(res.getString("quality"));
                    durationList6.add(res.getString("duration"));
                }

                type = elementsItems.get(6).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList7.add(res.getString("idnumber"));
                    locFacList7.add(res.getString("locationfactor"));
                    costList7.add(res.getString("cost"));
                    cityList7.add(res.getString("city"));
                    qualityList7.add(res.getString("quality"));
                    durationList7.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    for (int l = 0; l < costList4.size(); l++) {
                        int sumValue = Integer.parseInt(locFacList4.get(l).toString()) + Integer.parseInt(costList4.get(l).toString());
                        costAndLocfacList4.add(sumValue);
                    }

                    for (int m = 0; m < costList5.size(); m++) {
                        int sumValue = Integer.parseInt(locFacList5.get(m).toString()) + Integer.parseInt(costList5.get(m).toString());
                        costAndLocfacList5.add(sumValue);
                    }

                    for (int n = 0; n < costList6.size(); n++) {
                        int sumValue = Integer.parseInt(locFacList6.get(n).toString()) + Integer.parseInt(costList6.get(n).toString());
                        costAndLocfacList6.add(sumValue);
                    }

                    for (int a = 0; a < costList7.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList7.get(a).toString()) + Integer.parseInt(costList7.get(a).toString());
                        costAndLocfacList7.add(sumValue);
                    }

                    importantValues = calculateMin7(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3, costAndLocfacList4, costAndLocfacList5, costAndLocfacList6,
                            costAndLocfacList7);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = importantValues[0];
            int var2 = importantValues[1];
            int var3 = importantValues[2];
            int var4 = importantValues[3];
            int var5 = importantValues[4];
            int var6 = importantValues[5];
            int var7 = importantValues[6];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            int idnumber4 = Integer.parseInt(idList4.get(var4).toString());
            int idnumber5 = Integer.parseInt(idList5.get(var5).toString());
            int idnumber6 = Integer.parseInt(idList6.get(var6).toString());
            int idnumber7 = Integer.parseInt(idList7.get(var7).toString());

            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

                PreparedStatement pstD = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber4 + "'");
                ResultSet resD = pstD.executeQuery();

                PreparedStatement pstE = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber5 + "'");
                ResultSet resE = pstE.executeQuery();

                PreparedStatement pstF = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber6 + "'");
                ResultSet resF = pstF.executeQuery();

                PreparedStatement pstG = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber7 + "'");
                ResultSet resG = pstG.executeQuery();

                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();
                String cty4 = cityList4.get(var4).toString();
                String cty5 = cityList5.get(var5).toString();
                String cty6 = cityList6.get(var6).toString();
                String cty7 = cityList7.get(var7).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                String transport3 = "SELECT * FROM database.transportation where (startDestination = '" + cty3 + "'" + " or startDestination = '" + cty4 + "') and (nextDestination = '" + cty3 + "' or"
                        + " nextDestination = '" + cty4 + "')";
                PreparedStatement pst3 = conn.prepareStatement(transport3);
                ResultSet res3 = pst3.executeQuery();

                String transport4 = "SELECT * FROM database.transportation where (startDestination = '" + cty4 + "'" + " or startDestination = '" + cty5 + "') and (nextDestination = '" + cty4 + "' or"
                        + " nextDestination = '" + cty5 + "')";
                PreparedStatement pst4 = conn.prepareStatement(transport4);
                ResultSet res4 = pst4.executeQuery();

                String transport5 = "SELECT * FROM database.transportation where (startDestination = '" + cty5 + "'" + " or startDestination = '" + cty6 + "') and (nextDestination = '" + cty5 + "' or"
                        + " nextDestination = '" + cty6 + "')";
                PreparedStatement pst5 = conn.prepareStatement(transport5);
                ResultSet res5 = pst5.executeQuery();

                String transport6 = "SELECT * FROM database.transportation where (startDestination = '" + cty6 + "'" + " or startDestination = '" + cty7 + "') and (nextDestination = '" + cty6 + "' or"
                        + " nextDestination = '" + cty7 + "')";
                PreparedStatement pst6 = conn.prepareStatement(transport5);
                ResultSet res6 = pst6.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 5) {
                    while (res3.next()) {
                        String transportationId = res3.getString("transportationId");
                        String transportationCost = res3.getString("transportationCost");
                        String startDestination = res3.getString("startDestination");
                        String nextDestination = res3.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resD.next()) {
                    String idnumber = resD.getString("idnumber");
                    String link = resD.getString("link");
                    String type = resD.getString("type");
                    String name = resD.getString("name");
                    String cost = resD.getString("cost");
                    String duration = resD.getString("duration");
                    String quality = resD.getString("quality");
                    String company = resD.getString("company");
                    String country = resD.getString("country");
                    String city = resD.getString("city");
                    String locationFactor = resD.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 7) {
                    while (res4.next()) {
                        String transportationId = res4.getString("transportationId");
                        String transportationCost = res4.getString("transportationCost");
                        String startDestination = res4.getString("startDestination");
                        String nextDestination = res4.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resE.next()) {
                    String idnumber = resE.getString("idnumber");
                    String link = resE.getString("link");
                    String type = resE.getString("type");
                    String name = resE.getString("name");
                    String cost = resE.getString("cost");
                    String duration = resE.getString("duration");
                    String quality = resE.getString("quality");
                    String company = resE.getString("company");
                    String country = resE.getString("country");
                    String city = resE.getString("city");
                    String locationFactor = resE.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 9) {
                    while (res5.next()) {
                        String transportationId = res5.getString("transportationId");
                        String transportationCost = res5.getString("transportationCost");
                        String startDestination = res5.getString("startDestination");
                        String nextDestination = res5.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resF.next()) {
                    String idnumber = resF.getString("idnumber");
                    String link = resF.getString("link");
                    String type = resF.getString("type");
                    String name = resF.getString("name");
                    String cost = resF.getString("cost");
                    String duration = resF.getString("duration");
                    String quality = resF.getString("quality");
                    String company = resF.getString("company");
                    String country = resF.getString("country");
                    String city = resF.getString("city");
                    String locationFactor = resF.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 11) {
                    while (res6.next()) {
                        String transportationId = res6.getString("transportationId");
                        String transportationCost = res6.getString("transportationCost");
                        String startDestination = res6.getString("startDestination");
                        String nextDestination = res6.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resG.next()) {
                    String idnumber = resG.getString("idnumber");
                    String link = resG.getString("link");
                    String type = resG.getString("type");
                    String name = resG.getString("name");
                    String cost = resG.getString("cost");
                    String duration = resG.getString("duration");
                    String quality = resG.getString("quality");
                    String company = resG.getString("company");
                    String country = resG.getString("country");
                    String city = resG.getString("city");
                    String locationFactor = resG.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }
        if (ElementCount == 8) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            ArrayList idList4 = new ArrayList();
            ArrayList locFacList4 = new ArrayList();
            ArrayList costList4 = new ArrayList();
            ArrayList costAndLocfacList4 = new ArrayList();
            ArrayList cityList4 = new ArrayList();
            ArrayList qualityList4 = new ArrayList();
            ArrayList durationList4 = new ArrayList();

            ArrayList idList5 = new ArrayList();
            ArrayList locFacList5 = new ArrayList();
            ArrayList costList5 = new ArrayList();
            ArrayList costAndLocfacList5 = new ArrayList();
            ArrayList cityList5 = new ArrayList();
            ArrayList qualityList5 = new ArrayList();
            ArrayList durationList5 = new ArrayList();

            ArrayList idList6 = new ArrayList();
            ArrayList locFacList6 = new ArrayList();
            ArrayList costList6 = new ArrayList();
            ArrayList costAndLocfacList6 = new ArrayList();
            ArrayList cityList6 = new ArrayList();
            ArrayList qualityList6 = new ArrayList();
            ArrayList durationList6 = new ArrayList();

            ArrayList idList7 = new ArrayList();
            ArrayList locFacList7 = new ArrayList();
            ArrayList costList7 = new ArrayList();
            ArrayList costAndLocfacList7 = new ArrayList();
            ArrayList cityList7 = new ArrayList();
            ArrayList qualityList7 = new ArrayList();
            ArrayList durationList7 = new ArrayList();

            ArrayList idList8 = new ArrayList();
            ArrayList locFacList8 = new ArrayList();
            ArrayList costList8 = new ArrayList();
            ArrayList costAndLocfacList8 = new ArrayList();
            ArrayList cityList8 = new ArrayList();
            ArrayList qualityList8 = new ArrayList();
            ArrayList durationList8 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            int[] importantValues = new int[9];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }

                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                type = elementsItems.get(3).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList4.add(res.getString("idnumber"));
                    locFacList4.add(res.getString("locationfactor"));
                    costList4.add(res.getString("cost"));
                    cityList4.add(res.getString("city"));
                    qualityList4.add(res.getString("quality"));
                    durationList4.add(res.getString("duration"));
                }

                type = elementsItems.get(4).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList5.add(res.getString("idnumber"));
                    locFacList5.add(res.getString("locationfactor"));
                    costList5.add(res.getString("cost"));
                    cityList5.add(res.getString("city"));
                    qualityList5.add(res.getString("quality"));
                    durationList5.add(res.getString("duration"));
                }

                type = elementsItems.get(5).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList6.add(res.getString("idnumber"));
                    locFacList6.add(res.getString("locationfactor"));
                    costList6.add(res.getString("cost"));
                    cityList6.add(res.getString("city"));
                    qualityList6.add(res.getString("quality"));
                    durationList6.add(res.getString("duration"));
                }

                type = elementsItems.get(6).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList7.add(res.getString("idnumber"));
                    locFacList7.add(res.getString("locationfactor"));
                    costList7.add(res.getString("cost"));
                    cityList7.add(res.getString("city"));
                    qualityList7.add(res.getString("quality"));
                    durationList7.add(res.getString("duration"));
                }

                type = elementsItems.get(7).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList8.add(res.getString("idnumber"));
                    locFacList8.add(res.getString("locationfactor"));
                    costList8.add(res.getString("cost"));
                    cityList8.add(res.getString("city"));
                    qualityList8.add(res.getString("quality"));
                    durationList8.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    for (int l = 0; l < costList4.size(); l++) {
                        int sumValue = Integer.parseInt(locFacList4.get(l).toString()) + Integer.parseInt(costList4.get(l).toString());
                        costAndLocfacList4.add(sumValue);
                    }

                    for (int m = 0; m < costList5.size(); m++) {
                        int sumValue = Integer.parseInt(locFacList5.get(m).toString()) + Integer.parseInt(costList5.get(m).toString());
                        costAndLocfacList5.add(sumValue);
                    }

                    for (int n = 0; n < costList6.size(); n++) {
                        int sumValue = Integer.parseInt(locFacList6.get(n).toString()) + Integer.parseInt(costList6.get(n).toString());
                        costAndLocfacList6.add(sumValue);
                    }

                    for (int a = 0; a < costList7.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList7.get(a).toString()) + Integer.parseInt(costList7.get(a).toString());
                        costAndLocfacList7.add(sumValue);
                    }

                    for (int a = 0; a < costList8.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList8.get(a).toString()) + Integer.parseInt(costList8.get(a).toString());
                        costAndLocfacList8.add(sumValue);
                    }

                    importantValues = calculateMin8(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3, costAndLocfacList4, costAndLocfacList5, costAndLocfacList6,
                            costAndLocfacList7, costAndLocfacList8);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = importantValues[0];
            int var2 = importantValues[1];
            int var3 = importantValues[2];
            int var4 = importantValues[3];
            int var5 = importantValues[4];
            int var6 = importantValues[5];
            int var7 = importantValues[6];
            int var8 = importantValues[7];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            int idnumber4 = Integer.parseInt(idList4.get(var4).toString());
            int idnumber5 = Integer.parseInt(idList5.get(var5).toString());
            int idnumber6 = Integer.parseInt(idList6.get(var6).toString());
            int idnumber7 = Integer.parseInt(idList7.get(var7).toString());
            int idnumber8 = Integer.parseInt(idList8.get(var8).toString());

            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

                PreparedStatement pstD = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber4 + "'");
                ResultSet resD = pstD.executeQuery();

                PreparedStatement pstE = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber5 + "'");
                ResultSet resE = pstE.executeQuery();

                PreparedStatement pstF = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber6 + "'");
                ResultSet resF = pstF.executeQuery();

                PreparedStatement pstG = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber7 + "'");
                ResultSet resG = pstG.executeQuery();

                PreparedStatement pstH = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber8 + "'");
                ResultSet resH = pstH.executeQuery();

                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();
                String cty4 = cityList4.get(var4).toString();
                String cty5 = cityList5.get(var5).toString();
                String cty6 = cityList6.get(var6).toString();
                String cty7 = cityList7.get(var7).toString();
                String cty8 = cityList8.get(var8).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                String transport3 = "SELECT * FROM database.transportation where (startDestination = '" + cty3 + "'" + " or startDestination = '" + cty4 + "') and (nextDestination = '" + cty3 + "' or"
                        + " nextDestination = '" + cty4 + "')";
                PreparedStatement pst3 = conn.prepareStatement(transport3);
                ResultSet res3 = pst3.executeQuery();

                String transport4 = "SELECT * FROM database.transportation where (startDestination = '" + cty4 + "'" + " or startDestination = '" + cty5 + "') and (nextDestination = '" + cty4 + "' or"
                        + " nextDestination = '" + cty5 + "')";
                PreparedStatement pst4 = conn.prepareStatement(transport4);
                ResultSet res4 = pst4.executeQuery();

                String transport5 = "SELECT * FROM database.transportation where (startDestination = '" + cty5 + "'" + " or startDestination = '" + cty6 + "') and (nextDestination = '" + cty5 + "' or"
                        + " nextDestination = '" + cty6 + "')";
                PreparedStatement pst5 = conn.prepareStatement(transport5);
                ResultSet res5 = pst5.executeQuery();

                String transport6 = "SELECT * FROM database.transportation where (startDestination = '" + cty6 + "'" + " or startDestination = '" + cty7 + "') and (nextDestination = '" + cty6 + "' or"
                        + " nextDestination = '" + cty7 + "')";
                PreparedStatement pst6 = conn.prepareStatement(transport6);
                ResultSet res6 = pst6.executeQuery();

                String transport7 = "SELECT * FROM database.transportation where (startDestination = '" + cty7 + "'" + " or startDestination = '" + cty8 + "') and (nextDestination = '" + cty7 + "' or"
                        + " nextDestination = '" + cty8 + "')";
                PreparedStatement pst7 = conn.prepareStatement(transport7);
                ResultSet res7 = pst7.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 5) {
                    while (res3.next()) {
                        String transportationId = res3.getString("transportationId");
                        String transportationCost = res3.getString("transportationCost");
                        String startDestination = res3.getString("startDestination");
                        String nextDestination = res3.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resD.next()) {
                    String idnumber = resD.getString("idnumber");
                    String link = resD.getString("link");
                    String type = resD.getString("type");
                    String name = resD.getString("name");
                    String cost = resD.getString("cost");
                    String duration = resD.getString("duration");
                    String quality = resD.getString("quality");
                    String company = resD.getString("company");
                    String country = resD.getString("country");
                    String city = resD.getString("city");
                    String locationFactor = resD.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 7) {
                    while (res4.next()) {
                        String transportationId = res4.getString("transportationId");
                        String transportationCost = res4.getString("transportationCost");
                        String startDestination = res4.getString("startDestination");
                        String nextDestination = res4.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resE.next()) {
                    String idnumber = resE.getString("idnumber");
                    String link = resE.getString("link");
                    String type = resE.getString("type");
                    String name = resE.getString("name");
                    String cost = resE.getString("cost");
                    String duration = resE.getString("duration");
                    String quality = resE.getString("quality");
                    String company = resE.getString("company");
                    String country = resE.getString("country");
                    String city = resE.getString("city");
                    String locationFactor = resE.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 9) {
                    while (res5.next()) {
                        String transportationId = res5.getString("transportationId");
                        String transportationCost = res5.getString("transportationCost");
                        String startDestination = res5.getString("startDestination");
                        String nextDestination = res5.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resF.next()) {
                    String idnumber = resF.getString("idnumber");
                    String link = resF.getString("link");
                    String type = resF.getString("type");
                    String name = resF.getString("name");
                    String cost = resF.getString("cost");
                    String duration = resF.getString("duration");
                    String quality = resF.getString("quality");
                    String company = resF.getString("company");
                    String country = resF.getString("country");
                    String city = resF.getString("city");
                    String locationFactor = resF.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 11) {
                    while (res6.next()) {
                        String transportationId = res6.getString("transportationId");
                        String transportationCost = res6.getString("transportationCost");
                        String startDestination = res6.getString("startDestination");
                        String nextDestination = res6.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resG.next()) {
                    String idnumber = resG.getString("idnumber");
                    String link = resG.getString("link");
                    String type = resG.getString("type");
                    String name = resG.getString("name");
                    String cost = resG.getString("cost");
                    String duration = resG.getString("duration");
                    String quality = resG.getString("quality");
                    String company = resG.getString("company");
                    String country = resG.getString("country");
                    String city = resG.getString("city");
                    String locationFactor = resG.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 13) {
                    while (res7.next()) {
                        String transportationId = res7.getString("transportationId");
                        String transportationCost = res7.getString("transportationCost");
                        String startDestination = res7.getString("startDestination");
                        String nextDestination = res7.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resH.next()) {
                    String idnumber = resH.getString("idnumber");
                    String link = resH.getString("link");
                    String type = resH.getString("type");
                    String name = resH.getString("name");
                    String cost = resH.getString("cost");
                    String duration = resH.getString("duration");
                    String quality = resH.getString("quality");
                    String company = resH.getString("company");
                    String country = resH.getString("country");
                    String city = resH.getString("city");
                    String locationFactor = resH.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }
        if (ElementCount == 9) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            ArrayList idList4 = new ArrayList();
            ArrayList locFacList4 = new ArrayList();
            ArrayList costList4 = new ArrayList();
            ArrayList costAndLocfacList4 = new ArrayList();
            ArrayList cityList4 = new ArrayList();
            ArrayList qualityList4 = new ArrayList();
            ArrayList durationList4 = new ArrayList();

            ArrayList idList5 = new ArrayList();
            ArrayList locFacList5 = new ArrayList();
            ArrayList costList5 = new ArrayList();
            ArrayList costAndLocfacList5 = new ArrayList();
            ArrayList cityList5 = new ArrayList();
            ArrayList qualityList5 = new ArrayList();
            ArrayList durationList5 = new ArrayList();

            ArrayList idList6 = new ArrayList();
            ArrayList locFacList6 = new ArrayList();
            ArrayList costList6 = new ArrayList();
            ArrayList costAndLocfacList6 = new ArrayList();
            ArrayList cityList6 = new ArrayList();
            ArrayList qualityList6 = new ArrayList();
            ArrayList durationList6 = new ArrayList();

            ArrayList idList7 = new ArrayList();
            ArrayList locFacList7 = new ArrayList();
            ArrayList costList7 = new ArrayList();
            ArrayList costAndLocfacList7 = new ArrayList();
            ArrayList cityList7 = new ArrayList();
            ArrayList qualityList7 = new ArrayList();
            ArrayList durationList7 = new ArrayList();

            ArrayList idList8 = new ArrayList();
            ArrayList locFacList8 = new ArrayList();
            ArrayList costList8 = new ArrayList();
            ArrayList costAndLocfacList8 = new ArrayList();
            ArrayList cityList8 = new ArrayList();
            ArrayList qualityList8 = new ArrayList();
            ArrayList durationList8 = new ArrayList();

            ArrayList idList9 = new ArrayList();
            ArrayList locFacList9 = new ArrayList();
            ArrayList costList9 = new ArrayList();
            ArrayList costAndLocfacList9 = new ArrayList();
            ArrayList cityList9 = new ArrayList();
            ArrayList qualityList9 = new ArrayList();
            ArrayList durationList9 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            double[] importantValues = new double[10];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }

                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                type = elementsItems.get(3).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList4.add(res.getString("idnumber"));
                    locFacList4.add(res.getString("locationfactor"));
                    costList4.add(res.getString("cost"));
                    cityList4.add(res.getString("city"));
                    qualityList4.add(res.getString("quality"));
                    durationList4.add(res.getString("duration"));
                }

                type = elementsItems.get(4).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList5.add(res.getString("idnumber"));
                    locFacList5.add(res.getString("locationfactor"));
                    costList5.add(res.getString("cost"));
                    cityList5.add(res.getString("city"));
                    qualityList5.add(res.getString("quality"));
                    durationList5.add(res.getString("duration"));
                }

                type = elementsItems.get(5).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList6.add(res.getString("idnumber"));
                    locFacList6.add(res.getString("locationfactor"));
                    costList6.add(res.getString("cost"));
                    cityList6.add(res.getString("city"));
                    qualityList6.add(res.getString("quality"));
                    durationList6.add(res.getString("duration"));
                }

                type = elementsItems.get(6).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList7.add(res.getString("idnumber"));
                    locFacList7.add(res.getString("locationfactor"));
                    costList7.add(res.getString("cost"));
                    cityList7.add(res.getString("city"));
                    qualityList7.add(res.getString("quality"));
                    durationList7.add(res.getString("duration"));
                }

                type = elementsItems.get(7).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList8.add(res.getString("idnumber"));
                    locFacList8.add(res.getString("locationfactor"));
                    costList8.add(res.getString("cost"));
                    cityList8.add(res.getString("city"));
                    qualityList8.add(res.getString("quality"));
                    durationList8.add(res.getString("duration"));
                }

                type = elementsItems.get(8).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList9.add(res.getString("idnumber"));
                    locFacList9.add(res.getString("locationfactor"));
                    costList9.add(res.getString("cost"));
                    cityList9.add(res.getString("city"));
                    qualityList9.add(res.getString("quality"));
                    durationList9.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    for (int l = 0; l < costList4.size(); l++) {
                        int sumValue = Integer.parseInt(locFacList4.get(l).toString()) + Integer.parseInt(costList4.get(l).toString());
                        costAndLocfacList4.add(sumValue);
                    }

                    for (int m = 0; m < costList5.size(); m++) {
                        int sumValue = Integer.parseInt(locFacList5.get(m).toString()) + Integer.parseInt(costList5.get(m).toString());
                        costAndLocfacList5.add(sumValue);
                    }

                    for (int n = 0; n < costList6.size(); n++) {
                        int sumValue = Integer.parseInt(locFacList6.get(n).toString()) + Integer.parseInt(costList6.get(n).toString());
                        costAndLocfacList6.add(sumValue);
                    }

                    for (int a = 0; a < costList7.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList7.get(a).toString()) + Integer.parseInt(costList7.get(a).toString());
                        costAndLocfacList7.add(sumValue);
                    }

                    for (int a = 0; a < costList8.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList8.get(a).toString()) + Integer.parseInt(costList8.get(a).toString());
                        costAndLocfacList8.add(sumValue);
                    }

                    for (int a = 0; a < costList9.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList9.get(a).toString()) + Integer.parseInt(costList9.get(a).toString());
                        costAndLocfacList9.add(sumValue);
                    }

                    importantValues = calculateMin9(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3, costAndLocfacList4, costAndLocfacList5, costAndLocfacList6,
                            costAndLocfacList7, costAndLocfacList8, costAndLocfacList9);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = (int) importantValues[0];
            int var2 = (int) importantValues[1];
            int var3 = (int) importantValues[2];
            int var4 = (int) importantValues[3];
            int var5 = (int) importantValues[4];
            int var6 = (int) importantValues[5];
            int var7 = (int) importantValues[6];
            int var8 = (int) importantValues[7];
            int var9 = (int) importantValues[8];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            int idnumber4 = Integer.parseInt(idList4.get(var4).toString());
            int idnumber5 = Integer.parseInt(idList5.get(var5).toString());
            int idnumber6 = Integer.parseInt(idList6.get(var6).toString());
            int idnumber7 = Integer.parseInt(idList7.get(var7).toString());
            int idnumber8 = Integer.parseInt(idList8.get(var8).toString());
            int idnumber9 = Integer.parseInt(idList9.get(var9).toString());

            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

                PreparedStatement pstD = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber4 + "'");
                ResultSet resD = pstD.executeQuery();

                PreparedStatement pstE = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber5 + "'");
                ResultSet resE = pstE.executeQuery();

                PreparedStatement pstF = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber6 + "'");
                ResultSet resF = pstF.executeQuery();

                PreparedStatement pstG = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber7 + "'");
                ResultSet resG = pstG.executeQuery();

                PreparedStatement pstH = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber8 + "'");
                ResultSet resH = pstH.executeQuery();

                PreparedStatement pstI = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber9 + "'");
                ResultSet resI = pstI.executeQuery();

                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();
                String cty4 = cityList4.get(var4).toString();
                String cty5 = cityList5.get(var5).toString();
                String cty6 = cityList6.get(var6).toString();
                String cty7 = cityList7.get(var7).toString();
                String cty8 = cityList8.get(var8).toString();
                String cty9 = cityList9.get(var9).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                String transport3 = "SELECT * FROM database.transportation where (startDestination = '" + cty3 + "'" + " or startDestination = '" + cty4 + "') and (nextDestination = '" + cty3 + "' or"
                        + " nextDestination = '" + cty4 + "')";
                PreparedStatement pst3 = conn.prepareStatement(transport3);
                ResultSet res3 = pst3.executeQuery();

                String transport4 = "SELECT * FROM database.transportation where (startDestination = '" + cty4 + "'" + " or startDestination = '" + cty5 + "') and (nextDestination = '" + cty4 + "' or"
                        + " nextDestination = '" + cty5 + "')";
                PreparedStatement pst4 = conn.prepareStatement(transport4);
                ResultSet res4 = pst4.executeQuery();

                String transport5 = "SELECT * FROM database.transportation where (startDestination = '" + cty5 + "'" + " or startDestination = '" + cty6 + "') and (nextDestination = '" + cty5 + "' or"
                        + " nextDestination = '" + cty6 + "')";
                PreparedStatement pst5 = conn.prepareStatement(transport5);
                ResultSet res5 = pst5.executeQuery();

                String transport6 = "SELECT * FROM database.transportation where (startDestination = '" + cty6 + "'" + " or startDestination = '" + cty7 + "') and (nextDestination = '" + cty6 + "' or"
                        + " nextDestination = '" + cty7 + "')";
                PreparedStatement pst6 = conn.prepareStatement(transport6);
                ResultSet res6 = pst6.executeQuery();

                String transport7 = "SELECT * FROM database.transportation where (startDestination = '" + cty7 + "'" + " or startDestination = '" + cty8 + "') and (nextDestination = '" + cty7 + "' or"
                        + " nextDestination = '" + cty8 + "')";
                PreparedStatement pst7 = conn.prepareStatement(transport7);
                ResultSet res7 = pst7.executeQuery();

                String transport8 = "SELECT * FROM database.transportation where (startDestination = '" + cty8 + "'" + " or startDestination = '" + cty9 + "') and (nextDestination = '" + cty8 + "' or"
                        + " nextDestination = '" + cty9 + "')";
                PreparedStatement pst8 = conn.prepareStatement(transport8);
                ResultSet res8 = pst8.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 5) {
                    while (res3.next()) {
                        String transportationId = res3.getString("transportationId");
                        String transportationCost = res3.getString("transportationCost");
                        String startDestination = res3.getString("startDestination");
                        String nextDestination = res3.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resD.next()) {
                    String idnumber = resD.getString("idnumber");
                    String link = resD.getString("link");
                    String type = resD.getString("type");
                    String name = resD.getString("name");
                    String cost = resD.getString("cost");
                    String duration = resD.getString("duration");
                    String quality = resD.getString("quality");
                    String company = resD.getString("company");
                    String country = resD.getString("country");
                    String city = resD.getString("city");
                    String locationFactor = resD.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 7) {
                    while (res4.next()) {
                        String transportationId = res4.getString("transportationId");
                        String transportationCost = res4.getString("transportationCost");
                        String startDestination = res4.getString("startDestination");
                        String nextDestination = res4.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resE.next()) {
                    String idnumber = resE.getString("idnumber");
                    String link = resE.getString("link");
                    String type = resE.getString("type");
                    String name = resE.getString("name");
                    String cost = resE.getString("cost");
                    String duration = resE.getString("duration");
                    String quality = resE.getString("quality");
                    String company = resE.getString("company");
                    String country = resE.getString("country");
                    String city = resE.getString("city");
                    String locationFactor = resE.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 9) {
                    while (res5.next()) {
                        String transportationId = res5.getString("transportationId");
                        String transportationCost = res5.getString("transportationCost");
                        String startDestination = res5.getString("startDestination");
                        String nextDestination = res5.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resF.next()) {
                    String idnumber = resF.getString("idnumber");
                    String link = resF.getString("link");
                    String type = resF.getString("type");
                    String name = resF.getString("name");
                    String cost = resF.getString("cost");
                    String duration = resF.getString("duration");
                    String quality = resF.getString("quality");
                    String company = resF.getString("company");
                    String country = resF.getString("country");
                    String city = resF.getString("city");
                    String locationFactor = resF.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 11) {
                    while (res6.next()) {
                        String transportationId = res6.getString("transportationId");
                        String transportationCost = res6.getString("transportationCost");
                        String startDestination = res6.getString("startDestination");
                        String nextDestination = res6.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resG.next()) {
                    String idnumber = resG.getString("idnumber");
                    String link = resG.getString("link");
                    String type = resG.getString("type");
                    String name = resG.getString("name");
                    String cost = resG.getString("cost");
                    String duration = resG.getString("duration");
                    String quality = resG.getString("quality");
                    String company = resG.getString("company");
                    String country = resG.getString("country");
                    String city = resG.getString("city");
                    String locationFactor = resG.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 13) {
                    while (res7.next()) {
                        String transportationId = res7.getString("transportationId");
                        String transportationCost = res7.getString("transportationCost");
                        String startDestination = res7.getString("startDestination");
                        String nextDestination = res7.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resH.next()) {
                    String idnumber = resH.getString("idnumber");
                    String link = resH.getString("link");
                    String type = resH.getString("type");
                    String name = resH.getString("name");
                    String cost = resH.getString("cost");
                    String duration = resH.getString("duration");
                    String quality = resH.getString("quality");
                    String company = resH.getString("company");
                    String country = resH.getString("country");
                    String city = resH.getString("city");
                    String locationFactor = resH.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 15) {
                    while (res8.next()) {
                        String transportationId = res8.getString("transportationId");
                        String transportationCost = res8.getString("transportationCost");
                        String startDestination = res8.getString("startDestination");
                        String nextDestination = res8.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resI.next()) {
                    String idnumber = resI.getString("idnumber");
                    String link = resI.getString("link");
                    String type = resI.getString("type");
                    String name = resI.getString("name");
                    String cost = resI.getString("cost");
                    String duration = resI.getString("duration");
                    String quality = resI.getString("quality");
                    String company = resI.getString("company");
                    String country = resI.getString("country");
                    String city = resI.getString("city");
                    String locationFactor = resI.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }
        if (ElementCount == 10) {

            ArrayList idList1 = new ArrayList();
            ArrayList locFacList1 = new ArrayList();
            ArrayList costList1 = new ArrayList();
            ArrayList costAndLocfacList1 = new ArrayList();
            ArrayList cityList1 = new ArrayList();
            ArrayList qualityList1 = new ArrayList();
            ArrayList durationList1 = new ArrayList();

            ArrayList idList2 = new ArrayList();
            ArrayList locFacList2 = new ArrayList();
            ArrayList costList2 = new ArrayList();
            ArrayList costAndLocfacList2 = new ArrayList();
            ArrayList cityList2 = new ArrayList();
            ArrayList qualityList2 = new ArrayList();
            ArrayList durationList2 = new ArrayList();

            ArrayList idList3 = new ArrayList();
            ArrayList locFacList3 = new ArrayList();
            ArrayList costList3 = new ArrayList();
            ArrayList costAndLocfacList3 = new ArrayList();
            ArrayList cityList3 = new ArrayList();
            ArrayList qualityList3 = new ArrayList();
            ArrayList durationList3 = new ArrayList();

            ArrayList idList4 = new ArrayList();
            ArrayList locFacList4 = new ArrayList();
            ArrayList costList4 = new ArrayList();
            ArrayList costAndLocfacList4 = new ArrayList();
            ArrayList cityList4 = new ArrayList();
            ArrayList qualityList4 = new ArrayList();
            ArrayList durationList4 = new ArrayList();

            ArrayList idList5 = new ArrayList();
            ArrayList locFacList5 = new ArrayList();
            ArrayList costList5 = new ArrayList();
            ArrayList costAndLocfacList5 = new ArrayList();
            ArrayList cityList5 = new ArrayList();
            ArrayList qualityList5 = new ArrayList();
            ArrayList durationList5 = new ArrayList();

            ArrayList idList6 = new ArrayList();
            ArrayList locFacList6 = new ArrayList();
            ArrayList costList6 = new ArrayList();
            ArrayList costAndLocfacList6 = new ArrayList();
            ArrayList cityList6 = new ArrayList();
            ArrayList qualityList6 = new ArrayList();
            ArrayList durationList6 = new ArrayList();

            ArrayList idList7 = new ArrayList();
            ArrayList locFacList7 = new ArrayList();
            ArrayList costList7 = new ArrayList();
            ArrayList costAndLocfacList7 = new ArrayList();
            ArrayList cityList7 = new ArrayList();
            ArrayList qualityList7 = new ArrayList();
            ArrayList durationList7 = new ArrayList();

            ArrayList idList8 = new ArrayList();
            ArrayList locFacList8 = new ArrayList();
            ArrayList costList8 = new ArrayList();
            ArrayList costAndLocfacList8 = new ArrayList();
            ArrayList cityList8 = new ArrayList();
            ArrayList qualityList8 = new ArrayList();
            ArrayList durationList8 = new ArrayList();

            ArrayList idList9 = new ArrayList();
            ArrayList locFacList9 = new ArrayList();
            ArrayList costList9 = new ArrayList();
            ArrayList costAndLocfacList9 = new ArrayList();
            ArrayList cityList9 = new ArrayList();
            ArrayList qualityList9 = new ArrayList();
            ArrayList durationList9 = new ArrayList();

            ArrayList idList10 = new ArrayList();
            ArrayList locFacList10 = new ArrayList();
            ArrayList costList10 = new ArrayList();
            ArrayList costAndLocfacList10 = new ArrayList();
            ArrayList cityList10 = new ArrayList();
            ArrayList qualityList10 = new ArrayList();
            ArrayList durationList10 = new ArrayList();

            //int[][] mix2 = new int[100][100];
            double[] importantValues = new double[11];

            try {

                for (int i = 0; i < ElementCount; i++) {
                    Object obj = jList2.getModel().getElementAt(i);
                    elementsItems.add(obj.toString());
                }

                String type = elementsItems.get(0).toString();
                PreparedStatement pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList1.add(res.getString("idnumber"));
                    locFacList1.add(res.getString("locationfactor"));
                    costList1.add(res.getString("cost"));
                    cityList1.add(res.getString("city"));
                    qualityList1.add(res.getString("quality"));
                    durationList1.add(res.getString("duration"));
                }

                type = elementsItems.get(1).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList2.add(res.getString("idnumber"));
                    locFacList2.add(res.getString("locationfactor"));
                    costList2.add(res.getString("cost"));
                    cityList2.add(res.getString("city"));
                    qualityList2.add(res.getString("quality"));
                    durationList2.add(res.getString("duration"));
                }

                type = elementsItems.get(2).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList3.add(res.getString("idnumber"));
                    locFacList3.add(res.getString("locationfactor"));
                    costList3.add(res.getString("cost"));
                    cityList3.add(res.getString("city"));
                    qualityList3.add(res.getString("quality"));
                    durationList3.add(res.getString("duration"));
                }

                type = elementsItems.get(3).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList4.add(res.getString("idnumber"));
                    locFacList4.add(res.getString("locationfactor"));
                    costList4.add(res.getString("cost"));
                    cityList4.add(res.getString("city"));
                    qualityList4.add(res.getString("quality"));
                    durationList4.add(res.getString("duration"));
                }

                type = elementsItems.get(4).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList5.add(res.getString("idnumber"));
                    locFacList5.add(res.getString("locationfactor"));
                    costList5.add(res.getString("cost"));
                    cityList5.add(res.getString("city"));
                    qualityList5.add(res.getString("quality"));
                    durationList5.add(res.getString("duration"));
                }

                type = elementsItems.get(5).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList6.add(res.getString("idnumber"));
                    locFacList6.add(res.getString("locationfactor"));
                    costList6.add(res.getString("cost"));
                    cityList6.add(res.getString("city"));
                    qualityList6.add(res.getString("quality"));
                    durationList6.add(res.getString("duration"));
                }

                type = elementsItems.get(6).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList7.add(res.getString("idnumber"));
                    locFacList7.add(res.getString("locationfactor"));
                    costList7.add(res.getString("cost"));
                    cityList7.add(res.getString("city"));
                    qualityList7.add(res.getString("quality"));
                    durationList7.add(res.getString("duration"));
                }

                type = elementsItems.get(7).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList8.add(res.getString("idnumber"));
                    locFacList8.add(res.getString("locationfactor"));
                    costList8.add(res.getString("cost"));
                    cityList8.add(res.getString("city"));
                    qualityList8.add(res.getString("quality"));
                    durationList8.add(res.getString("duration"));
                }

                type = elementsItems.get(8).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList9.add(res.getString("idnumber"));
                    locFacList9.add(res.getString("locationfactor"));
                    costList9.add(res.getString("cost"));
                    cityList9.add(res.getString("city"));
                    qualityList9.add(res.getString("quality"));
                    durationList9.add(res.getString("duration"));
                }

                type = elementsItems.get(9).toString();
                pst = conn.prepareStatement("Select * from database.service where type='" + type + "'");
                res = pst.executeQuery();
                while (res.next()) {
                    idList10.add(res.getString("idnumber"));
                    locFacList10.add(res.getString("locationfactor"));
                    costList10.add(res.getString("cost"));
                    cityList10.add(res.getString("city"));
                    qualityList10.add(res.getString("quality"));
                    durationList10.add(res.getString("duration"));
                }

                if (jRadioButton1.isSelected()) {

                    for (int i = 0; i < costList1.size(); i++) {
                        int sumValue = Integer.parseInt(locFacList1.get(i).toString()) + Integer.parseInt(costList1.get(i).toString());
                        costAndLocfacList1.add(sumValue);
                    }

                    for (int j = 0; j < costList2.size(); j++) {
                        int sumValue = Integer.parseInt(locFacList2.get(j).toString()) + Integer.parseInt(costList2.get(j).toString());
                        costAndLocfacList2.add(sumValue);
                    }

                    for (int k = 0; k < costList3.size(); k++) {
                        int sumValue = Integer.parseInt(locFacList3.get(k).toString()) + Integer.parseInt(costList3.get(k).toString());
                        costAndLocfacList3.add(sumValue);
                    }

                    for (int l = 0; l < costList4.size(); l++) {
                        int sumValue = Integer.parseInt(locFacList4.get(l).toString()) + Integer.parseInt(costList4.get(l).toString());
                        costAndLocfacList4.add(sumValue);
                    }

                    for (int m = 0; m < costList5.size(); m++) {
                        int sumValue = Integer.parseInt(locFacList5.get(m).toString()) + Integer.parseInt(costList5.get(m).toString());
                        costAndLocfacList5.add(sumValue);
                    }

                    for (int n = 0; n < costList6.size(); n++) {
                        int sumValue = Integer.parseInt(locFacList6.get(n).toString()) + Integer.parseInt(costList6.get(n).toString());
                        costAndLocfacList6.add(sumValue);
                    }

                    for (int a = 0; a < costList7.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList7.get(a).toString()) + Integer.parseInt(costList7.get(a).toString());
                        costAndLocfacList7.add(sumValue);
                    }

                    for (int a = 0; a < costList8.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList8.get(a).toString()) + Integer.parseInt(costList8.get(a).toString());
                        costAndLocfacList8.add(sumValue);
                    }

                    for (int a = 0; a < costList9.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList9.get(a).toString()) + Integer.parseInt(costList9.get(a).toString());
                        costAndLocfacList9.add(sumValue);
                    }

                    for (int a = 0; a < costList9.size(); a++) {
                        int sumValue = Integer.parseInt(locFacList10.get(a).toString()) + Integer.parseInt(costList10.get(a).toString());
                        costAndLocfacList10.add(sumValue);
                    }

                    importantValues = calculateMin10(costAndLocfacList1, costAndLocfacList2, costAndLocfacList3, costAndLocfacList4, costAndLocfacList5, costAndLocfacList6,
                            costAndLocfacList7, costAndLocfacList8, costAndLocfacList9, costAndLocfacList10);
                }

//         if (jRadioButton2.isSelected()) {
//               
//             importantValues = calculateMin(qualityList1, qualityList2);
//             
//            }
//         
//         if (jRadioButton3.isSelected()) {
//                
//              importantValues = calculateMin(durationList1, durationList2);
//             
//            }
//
            } catch (Exception e) {

            }

            int var1 = (int) importantValues[0];
            int var2 = (int) importantValues[1];
            int var3 = (int) importantValues[2];
            int var4 = (int) importantValues[3];
            int var5 = (int) importantValues[4];
            int var6 = (int) importantValues[5];
            int var7 = (int) importantValues[6];
            int var8 = (int) importantValues[7];
            int var9 = (int) importantValues[8];
            int var10 = (int) importantValues[9];
            int idnumber1 = Integer.parseInt(idList1.get(var1).toString());
            int idnumber2 = Integer.parseInt(idList2.get(var2).toString());
            int idnumber3 = Integer.parseInt(idList3.get(var3).toString());
            int idnumber4 = Integer.parseInt(idList4.get(var4).toString());
            int idnumber5 = Integer.parseInt(idList5.get(var5).toString());
            int idnumber6 = Integer.parseInt(idList6.get(var6).toString());
            int idnumber7 = Integer.parseInt(idList7.get(var7).toString());
            int idnumber8 = Integer.parseInt(idList8.get(var8).toString());
            int idnumber9 = Integer.parseInt(idList9.get(var9).toString());
            int idnumber10 = Integer.parseInt(idList10.get(var10).toString());

            try {

                PreparedStatement pstA = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber1 + "'");
                ResultSet resA = pstA.executeQuery();

                PreparedStatement pstB = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber2 + "'");
                ResultSet resB = pstB.executeQuery();

                PreparedStatement pstC = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber3 + "'");
                ResultSet resC = pstC.executeQuery();

                PreparedStatement pstD = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber4 + "'");
                ResultSet resD = pstD.executeQuery();

                PreparedStatement pstE = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber5 + "'");
                ResultSet resE = pstE.executeQuery();

                PreparedStatement pstF = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber6 + "'");
                ResultSet resF = pstF.executeQuery();

                PreparedStatement pstG = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber7 + "'");
                ResultSet resG = pstG.executeQuery();

                PreparedStatement pstH = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber8 + "'");
                ResultSet resH = pstH.executeQuery();

                PreparedStatement pstI = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber9 + "'");
                ResultSet resI = pstI.executeQuery();

                PreparedStatement pstJ = conn.prepareStatement("Select * from database.service where idnumber='" + idnumber10 + "'");
                ResultSet resJ = pstJ.executeQuery();

                String cty1 = cityList1.get(var1).toString();
                String cty2 = cityList2.get(var2).toString();
                String cty3 = cityList3.get(var3).toString();
                String cty4 = cityList4.get(var4).toString();
                String cty5 = cityList5.get(var5).toString();
                String cty6 = cityList6.get(var6).toString();
                String cty7 = cityList7.get(var7).toString();
                String cty8 = cityList8.get(var8).toString();
                String cty9 = cityList9.get(var9).toString();
                String cty10 = cityList10.get(var10).toString();

                String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + cty1 + "'" + " or startDestination = '" + cty2 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty1 + "')";
                PreparedStatement pst1 = conn.prepareStatement(transport1);
                ResultSet res1 = pst1.executeQuery();

                String transport2 = "SELECT * FROM database.transportation where (startDestination = '" + cty2 + "'" + " or startDestination = '" + cty3 + "') and (nextDestination = '" + cty2 + "' or"
                        + " nextDestination = '" + cty3 + "')";
                PreparedStatement pst2 = conn.prepareStatement(transport2);
                ResultSet res2 = pst2.executeQuery();

                String transport3 = "SELECT * FROM database.transportation where (startDestination = '" + cty3 + "'" + " or startDestination = '" + cty4 + "') and (nextDestination = '" + cty3 + "' or"
                        + " nextDestination = '" + cty4 + "')";
                PreparedStatement pst3 = conn.prepareStatement(transport3);
                ResultSet res3 = pst3.executeQuery();

                String transport4 = "SELECT * FROM database.transportation where (startDestination = '" + cty4 + "'" + " or startDestination = '" + cty5 + "') and (nextDestination = '" + cty4 + "' or"
                        + " nextDestination = '" + cty5 + "')";
                PreparedStatement pst4 = conn.prepareStatement(transport4);
                ResultSet res4 = pst4.executeQuery();

                String transport5 = "SELECT * FROM database.transportation where (startDestination = '" + cty5 + "'" + " or startDestination = '" + cty6 + "') and (nextDestination = '" + cty5 + "' or"
                        + " nextDestination = '" + cty6 + "')";
                PreparedStatement pst5 = conn.prepareStatement(transport5);
                ResultSet res5 = pst5.executeQuery();

                String transport6 = "SELECT * FROM database.transportation where (startDestination = '" + cty6 + "'" + " or startDestination = '" + cty7 + "') and (nextDestination = '" + cty6 + "' or"
                        + " nextDestination = '" + cty7 + "')";
                PreparedStatement pst6 = conn.prepareStatement(transport6);
                ResultSet res6 = pst6.executeQuery();

                String transport7 = "SELECT * FROM database.transportation where (startDestination = '" + cty7 + "'" + " or startDestination = '" + cty8 + "') and (nextDestination = '" + cty7 + "' or"
                        + " nextDestination = '" + cty8 + "')";
                PreparedStatement pst7 = conn.prepareStatement(transport7);
                ResultSet res7 = pst7.executeQuery();

                String transport8 = "SELECT * FROM database.transportation where (startDestination = '" + cty8 + "'" + " or startDestination = '" + cty9 + "') and (nextDestination = '" + cty8 + "' or"
                        + " nextDestination = '" + cty9 + "')";
                PreparedStatement pst8 = conn.prepareStatement(transport8);
                ResultSet res8 = pst8.executeQuery();

                String transport9 = "SELECT * FROM database.transportation where (startDestination = '" + cty9 + "'" + " or startDestination = '" + cty10 + "') and (nextDestination = '" + cty9 + "' or"
                        + " nextDestination = '" + cty10 + "')";
                PreparedStatement pst9 = conn.prepareStatement(transport9);
                ResultSet res9 = pst9.executeQuery();

                int i = 0;

                while (resA.next()) {
                    String idnumber = resA.getString("idnumber");
                    String link = resA.getString("link");
                    String type = resA.getString("type");
                    String name = resA.getString("name");
                    String cost = resA.getString("cost");
                    String duration = resA.getString("duration");
                    String quality = resA.getString("quality");
                    String company = resA.getString("company");
                    String country = resA.getString("country");
                    String city = resA.getString("city");
                    String locationFactor = resA.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 1) {

                    while (res1.next()) {
                        String transportationId = res1.getString("transportationId");
                        String transportationCost = res1.getString("transportationCost");
                        String startDestination = res1.getString("startDestination");
                        String nextDestination = res1.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resB.next()) {
                    String idnumber = resB.getString("idnumber");
                    String link = resB.getString("link");
                    String type = resB.getString("type");
                    String name = resB.getString("name");
                    String cost = resB.getString("cost");
                    String duration = resB.getString("duration");
                    String quality = resB.getString("quality");
                    String company = resB.getString("company");
                    String country = resB.getString("country");
                    String city = resB.getString("city");
                    String locationFactor = resB.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 3) {

                    while (res2.next()) {
                        String transportationId = res2.getString("transportationId");
                        String transportationCost = res2.getString("transportationCost");
                        String startDestination = res2.getString("startDestination");
                        String nextDestination = res2.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resC.next()) {
                    String idnumber = resC.getString("idnumber");
                    String link = resC.getString("link");
                    String type = resC.getString("type");
                    String name = resC.getString("name");
                    String cost = resC.getString("cost");
                    String duration = resC.getString("duration");
                    String quality = resC.getString("quality");
                    String company = resC.getString("company");
                    String country = resC.getString("country");
                    String city = resC.getString("city");
                    String locationFactor = resC.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 5) {
                    while (res3.next()) {
                        String transportationId = res3.getString("transportationId");
                        String transportationCost = res3.getString("transportationCost");
                        String startDestination = res3.getString("startDestination");
                        String nextDestination = res3.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resD.next()) {
                    String idnumber = resD.getString("idnumber");
                    String link = resD.getString("link");
                    String type = resD.getString("type");
                    String name = resD.getString("name");
                    String cost = resD.getString("cost");
                    String duration = resD.getString("duration");
                    String quality = resD.getString("quality");
                    String company = resD.getString("company");
                    String country = resD.getString("country");
                    String city = resD.getString("city");
                    String locationFactor = resD.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 7) {
                    while (res4.next()) {
                        String transportationId = res4.getString("transportationId");
                        String transportationCost = res4.getString("transportationCost");
                        String startDestination = res4.getString("startDestination");
                        String nextDestination = res4.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resE.next()) {
                    String idnumber = resE.getString("idnumber");
                    String link = resE.getString("link");
                    String type = resE.getString("type");
                    String name = resE.getString("name");
                    String cost = resE.getString("cost");
                    String duration = resE.getString("duration");
                    String quality = resE.getString("quality");
                    String company = resE.getString("company");
                    String country = resE.getString("country");
                    String city = resE.getString("city");
                    String locationFactor = resE.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 9) {
                    while (res5.next()) {
                        String transportationId = res5.getString("transportationId");
                        String transportationCost = res5.getString("transportationCost");
                        String startDestination = res5.getString("startDestination");
                        String nextDestination = res5.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resF.next()) {
                    String idnumber = resF.getString("idnumber");
                    String link = resF.getString("link");
                    String type = resF.getString("type");
                    String name = resF.getString("name");
                    String cost = resF.getString("cost");
                    String duration = resF.getString("duration");
                    String quality = resF.getString("quality");
                    String company = resF.getString("company");
                    String country = resF.getString("country");
                    String city = resF.getString("city");
                    String locationFactor = resF.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 11) {
                    while (res6.next()) {
                        String transportationId = res6.getString("transportationId");
                        String transportationCost = res6.getString("transportationCost");
                        String startDestination = res6.getString("startDestination");
                        String nextDestination = res6.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resG.next()) {
                    String idnumber = resG.getString("idnumber");
                    String link = resG.getString("link");
                    String type = resG.getString("type");
                    String name = resG.getString("name");
                    String cost = resG.getString("cost");
                    String duration = resG.getString("duration");
                    String quality = resG.getString("quality");
                    String company = resG.getString("company");
                    String country = resG.getString("country");
                    String city = resG.getString("city");
                    String locationFactor = resG.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 13) {
                    while (res7.next()) {
                        String transportationId = res7.getString("transportationId");
                        String transportationCost = res7.getString("transportationCost");
                        String startDestination = res7.getString("startDestination");
                        String nextDestination = res7.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resH.next()) {
                    String idnumber = resH.getString("idnumber");
                    String link = resH.getString("link");
                    String type = resH.getString("type");
                    String name = resH.getString("name");
                    String cost = resH.getString("cost");
                    String duration = resH.getString("duration");
                    String quality = resH.getString("quality");
                    String company = resH.getString("company");
                    String country = resH.getString("country");
                    String city = resH.getString("city");
                    String locationFactor = resH.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 15) {
                    while (res8.next()) {
                        String transportationId = res8.getString("transportationId");
                        String transportationCost = res8.getString("transportationCost");
                        String startDestination = res8.getString("startDestination");
                        String nextDestination = res8.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resI.next()) {
                    String idnumber = resI.getString("idnumber");
                    String link = resI.getString("link");
                    String type = resI.getString("type");
                    String name = resI.getString("name");
                    String cost = resI.getString("cost");
                    String duration = resI.getString("duration");
                    String quality = resI.getString("quality");
                    String company = resI.getString("company");
                    String country = resI.getString("country");
                    String city = resI.getString("city");
                    String locationFactor = resI.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

                if (i == 17) {
                    while (res9.next()) {
                        String transportationId = res9.getString("transportationId");
                        String transportationCost = res9.getString("transportationCost");
                        String startDestination = res9.getString("startDestination");
                        String nextDestination = res9.getString("nextDestination");
                        String Destination = startDestination + " / " + nextDestination;
                        String caps = "------Â¤------";

                        table.addRow(new Object[]{transportationId, transportationCost, Destination, caps, caps, caps, caps, caps, caps, caps, caps});
                    }
                    i++;
                }

                while (resJ.next()) {
                    String idnumber = resJ.getString("idnumber");
                    String link = resJ.getString("link");
                    String type = resJ.getString("type");
                    String name = resJ.getString("name");
                    String cost = resJ.getString("cost");
                    String duration = resJ.getString("duration");
                    String quality = resJ.getString("quality");
                    String company = resJ.getString("company");
                    String country = resJ.getString("country");
                    String city = resJ.getString("city");
                    String locationFactor = resJ.getString("locationfactor");
                    table.addRow(new Object[]{idnumber, link, type, name, cost, duration, quality, company, country, city, locationFactor});
                    i++;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }
        calculateTotalAmounts();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        table.setRowCount(0);
        listModel2.clear();

        jLabel1.setText("Services Cost : -");
        jLabel2.setText("Transportations Cost : -");
        jLabel3.setText("Total Cost : -");
    }//GEN-LAST:event_jButton5MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked

        int sr = jTable2.getSelectedRow();
        String serviceId = "";
        String query = "";
        try {
            if (sr % 2 == 0) {
                query = "select * from database.service where idnumber = ?";
                int r = jTable2.getSelectedRow();
                //        int c = jTable1.getSelectedColumn();
                serviceId = jTable2.getModel().getValueAt(r, 0).toString();

                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, serviceId);
                res = pst.executeQuery();

                while (res.next()) {
                    String idnumber = res.getString("idnumber");
                    String link = res.getString("link");
                    String type = res.getString("type");
                    String name = res.getString("name");
                    String cost = res.getString("cost");
                    String duration = res.getString("duration");
                    String quality = res.getString("quality");
                    String company = res.getString("company");
                    String country = res.getString("country");
                    String city = res.getString("city");
                    String locationFactor = res.getString("locationfactor");

                    jLabelIdNumber4.setText(idnumber);
                    jLabelType.setText(type);
                    jLabelName.setText(name);
                    jLabelCost.setText(cost);
                    jLabelDuration.setText(duration);
                    jLabelQuality.setText(quality);
                    jLabelCompany.setText(company);
                    jLabelCountry.setText(country);
                    jLabelCity.setText(city);
                    jLabelLink.setText(link);
                }
            } else {
                query = "select * from database.transportation where transportationId = ?";
                int r = jTable2.getSelectedRow();
                //        int c = jTable1.getSelectedColumn();
                serviceId = jTable2.getModel().getValueAt(r, 0).toString();

                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, serviceId);
                res = pst.executeQuery();

                while (res.next()) {
                    String idnumber = res.getString("transportationId");
//                    String link = res.getString("link");
//                    String type = res.getString("type");
//                    String name = res.getString("name");
//                    String cost = res.getString("cost");
//                    String duration = res.getString("duration");
//                    String quality = res.getString("quality");
//                    String company = res.getString("company");
//                    String country = res.getString("country");
//                    String city = res.getString("city");
//                    String locationFactor = res.getString("locationfactor");

                    jLabelIdNumber4.setText(idnumber);
//                    jLabelType.setText(type);
//                    jLabelName.setText(name);
//                    jLabelCost.setText(cost);
//                    jLabelDuration.setText(duration);
//                    jLabelQuality.setText(quality);
//                    jLabelCompany.setText(company);
//                    jLabelCountry.setText(country);
//                    jLabelCity.setText(city);
//                    jLabelLink.setText(link);
                }
            }

        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
        }


    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {

            int rownumber = jTable2.getRowCount();
            int status = 0;
            int orderid = 0;
            String userid = jLabelUserId.getText();

            boolean isAvailable = true;
            while (isAvailable) {
                Random rand = new Random();
                int n = rand.nextInt(100000) + 1;
                orderid = n;

                String serialnoQuery = "SELECT * FROM database.order where orderid='" + orderid + "'";
                PreparedStatement pst1 = conn.prepareStatement(serialnoQuery);
                ResultSet res1 = pst1.executeQuery();
                while (!res1.next()) {
                    isAvailable = false;
                    break;

                }
            }

            for (int i = 0; i < rownumber; i++) {
                String serviceidString = jTable2.getModel().getValueAt(i, 0).toString();//"servis Id" aliniyor
                int serviceid = Integer.parseInt(serviceidString);

                Statement st = startConnection();
                String sql = "INSERT INTO database.order (userid, orderid, serviceid ) "
                        + "VALUES (" + "'" + userid + "'" + ","
                        + "'" + orderid + "'" + ","
                        + "'" + serviceid + "'" + ")";
                System.out.println(sql);
                st.executeUpdate(sql);
            }

            JOptionPane.showMessageDialog(null, "Transaction Success. ", "Order Information", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Transaction Unsuccess.", "Order Information", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String link = jLabelLink.getText();
        String address = "http://www." + link + ".com";

        try {
            URI uri = new URI(link);
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().browse(uri);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public int[] calculateMin2(ArrayList a1, ArrayList a2) {
        int[][] mix = new int[10][10];
        int[] importantValues = new int[3];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {

                int val1 = Integer.parseInt(a1.get(i).toString());
                int val2 = Integer.parseInt(a2.get(j).toString());
                mix[i][j] = val1 * val2;
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                runingValue = mix[i][j];
                if (runingValue != 0 && minCostValue > runingValue) {
                    minCostValue = runingValue;
                    Xcord = i;
                    Ycord = j;
                }

            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = minCostValue;

        return importantValues;

    }

    public int[] calculateMin3(ArrayList a1, ArrayList a2, ArrayList a3) {

        int[][][] mix = new int[10][10][10];
        int[] importantValues = new int[4];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    int val1 = Integer.parseInt(a1.get(i).toString());
                    int val2 = Integer.parseInt(a2.get(j).toString());
                    int val3 = Integer.parseInt(a3.get(k).toString());
                    mix[i][j][k] = val1 * val2 * val3;
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    runingValue = mix[i][j][k];
                    if (runingValue != 0 && minCostValue > runingValue) {
                        minCostValue = runingValue;
                        Xcord = i;
                        Ycord = j;
                        Zcord = k;
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = minCostValue;

        return importantValues;

    }

    private int[] calculateMin4(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4) {
        int[][][][] mix = new int[10][10][10][10];
        int[] importantValues = new int[5];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        int val1 = Integer.parseInt(a1.get(i).toString());
                        int val2 = Integer.parseInt(a2.get(j).toString());
                        int val3 = Integer.parseInt(a3.get(k).toString());
                        int val4 = Integer.parseInt(a4.get(l).toString());
                        mix[i][j][k][l] = val1 * val2 * val3 * val4;
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        runingValue = mix[i][j][k][l];
                        if (runingValue != 0 && minCostValue > runingValue) {
                            minCostValue = runingValue;
                            Xcord = i;
                            Ycord = j;
                            Zcord = k;
                            Acord = l;
                        }
                    }

                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin5(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5) {
        int[][][][][] mix = new int[10][10][10][10][10];
        int[] importantValues = new int[6];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            int val1 = Integer.parseInt(a1.get(i).toString());
                            int val2 = Integer.parseInt(a2.get(j).toString());
                            int val3 = Integer.parseInt(a3.get(k).toString());
                            int val4 = Integer.parseInt(a4.get(l).toString());
                            int val5 = Integer.parseInt(a5.get(m).toString());
                            mix[i][j][k][l][m] = val1 * val2 * val3 * val4 * val5;
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            runingValue = mix[i][j][k][l][m];
                            if (runingValue != 0 && minCostValue > runingValue) {
                                minCostValue = runingValue;
                                Xcord = i;
                                Ycord = j;
                                Zcord = k;
                                Acord = l;
                                Bcord = m;
                            }
                        }
                    }

                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin6(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6) {
        int[][][][][][] mix = new int[10][10][10][10][10][10];
        int[] importantValues = new int[7];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                int val1 = Integer.parseInt(a1.get(i).toString());
                                int val2 = Integer.parseInt(a2.get(j).toString());
                                int val3 = Integer.parseInt(a3.get(k).toString());
                                int val4 = Integer.parseInt(a4.get(l).toString());
                                int val5 = Integer.parseInt(a5.get(m).toString());
                                int val6 = Integer.parseInt(a6.get(n).toString());
                                mix[i][j][k][l][m][n] = val1 * val2 * val3 * val4 * val5 * val6;
                            }
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                runingValue = mix[i][j][k][l][m][n];
                                if (runingValue != 0 && minCostValue > runingValue) {
                                    minCostValue = runingValue;
                                    Xcord = i;
                                    Ycord = j;
                                    Zcord = k;
                                    Acord = l;
                                    Bcord = m;
                                    Ccord = n;
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin7(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7) {
        int[][][][][][][] mix = new int[10][10][10][10][10][10][10];
        int[] importantValues = new int[8];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    int val1 = Integer.parseInt(a1.get(i).toString());
                                    int val2 = Integer.parseInt(a2.get(j).toString());
                                    int val3 = Integer.parseInt(a3.get(k).toString());
                                    int val4 = Integer.parseInt(a4.get(l).toString());
                                    int val5 = Integer.parseInt(a5.get(m).toString());
                                    int val6 = Integer.parseInt(a6.get(n).toString());
                                    int val7 = Integer.parseInt(a7.get(a).toString());
                                    mix[i][j][k][l][m][n][a] = val1 * val2 * val3 * val4 * val5 * val6 * val7;
                                }
                            }
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    runingValue = mix[i][j][k][l][m][n][a];
                                    if (runingValue != 0 && minCostValue > runingValue) {
                                        minCostValue = runingValue;
                                        Xcord = i;
                                        Ycord = j;
                                        Zcord = k;
                                        Acord = l;
                                        Bcord = m;
                                        Ccord = n;
                                        Dcord = a;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin8(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7, ArrayList a8) {
        int[][][][][][][][] mix = new int[10][10][10][10][10][10][10][10];
        int[] importantValues = new int[9];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    for (int b = 0; b < a8.size(); b++) {
                                        int val1 = Integer.parseInt(a1.get(i).toString());
                                        int val2 = Integer.parseInt(a2.get(j).toString());
                                        int val3 = Integer.parseInt(a3.get(k).toString());
                                        int val4 = Integer.parseInt(a4.get(l).toString());
                                        int val5 = Integer.parseInt(a5.get(m).toString());
                                        int val6 = Integer.parseInt(a6.get(n).toString());
                                        int val7 = Integer.parseInt(a7.get(a).toString());
                                        int val8 = Integer.parseInt(a8.get(b).toString());
                                        mix[i][j][k][l][m][n][a][b] = val1 * val2 * val3 * val4 * val5 * val6 * val7 * val8;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;
        int Ecord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    for (int b = 0; b < mix[7].length; b++) {
                                        runingValue = mix[i][j][k][l][m][n][a][b];
                                        if (runingValue != 0 && minCostValue > runingValue) {
                                            minCostValue = runingValue;
                                            Xcord = i;
                                            Ycord = j;
                                            Zcord = k;
                                            Acord = l;
                                            Bcord = m;
                                            Ccord = n;
                                            Dcord = a;
                                            Ecord = b;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = Ecord;
        importantValues[8] = minCostValue;

        return importantValues;
    }

    private double[] calculateMin9(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7, ArrayList a8, ArrayList a9) {
        double[][][][][][][][][] mix = new double[7][7][7][7][7][7][7][7][7];
        double[] importantValues = new double[10];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    for (int b = 0; b < a8.size(); b++) {
                                        for (int c = 0; c < a9.size(); c++) {
                                            int val1 = Integer.parseInt(a1.get(i).toString());
                                            int val2 = Integer.parseInt(a2.get(j).toString());
                                            int val3 = Integer.parseInt(a3.get(k).toString());
                                            int val4 = Integer.parseInt(a4.get(l).toString());
                                            int val5 = Integer.parseInt(a5.get(m).toString());
                                            int val6 = Integer.parseInt(a6.get(n).toString());
                                            int val7 = Integer.parseInt(a7.get(a).toString());
                                            int val8 = Integer.parseInt(a8.get(b).toString());
                                            int val9 = Integer.parseInt(a9.get(c).toString());
                                            mix[i][j][k][l][m][n][a][b][c] = val1 * val2 * val3 * val4 * val5 * val6 * val7 * val8 * val9;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        double runingValue = 0;
        double minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;
        int Ecord = 0;
        int Fcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    for (int b = 0; b < mix[7].length; b++) {
                                        for (int c = 0; c < mix[8].length; c++) {
                                            runingValue = mix[i][j][k][l][m][n][a][b][c];
                                            if (runingValue != 0 && minCostValue > runingValue) {
                                                minCostValue = runingValue;
                                                Xcord = i;
                                                Ycord = j;
                                                Zcord = k;
                                                Acord = l;
                                                Bcord = m;
                                                Ccord = n;
                                                Dcord = a;
                                                Ecord = b;
                                                Fcord = c;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = Ecord;
        importantValues[8] = Fcord;
        importantValues[9] = minCostValue;

        return importantValues;
    }

    private double[] calculateMin10(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7, ArrayList a8, ArrayList a9, ArrayList a10) {
        double[][][][][][][][][][] mix = new double[5][5][5][5][5][5][5][5][5][5];
        double[] importantValues = new double[11];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    for (int b = 0; b < a8.size(); b++) {
                                        for (int c = 0; c < a9.size(); c++) {
                                            for (int d = 0; d < a10.size(); d++) {
                                                int val1 = Integer.parseInt(a1.get(i).toString());
                                                int val2 = Integer.parseInt(a2.get(j).toString());
                                                int val3 = Integer.parseInt(a3.get(k).toString());
                                                int val4 = Integer.parseInt(a4.get(l).toString());
                                                int val5 = Integer.parseInt(a5.get(m).toString());
                                                int val6 = Integer.parseInt(a6.get(n).toString());
                                                int val7 = Integer.parseInt(a7.get(a).toString());
                                                int val8 = Integer.parseInt(a8.get(b).toString());
                                                int val9 = Integer.parseInt(a9.get(c).toString());
                                                int val10 = Integer.parseInt(a10.get(d).toString());
                                                mix[i][j][k][l][m][n][a][b][c][d] = val1 * val2 * val3 * val4 * val5 * val6 * val7 * val8 * val9 * val10;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        double runingValue = 0;
        double minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;
        int Ecord = 0;
        int Fcord = 0;
        int Gcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    for (int b = 0; b < mix[7].length; b++) {
                                        for (int c = 0; c < mix[8].length; c++) {
                                            for (int d = 0; d < 10; d++) {
                                                runingValue = mix[i][j][k][l][m][n][a][b][c][d];
                                                if (runingValue != 0 && minCostValue > runingValue) {
                                                    minCostValue = runingValue;
                                                    Xcord = i;
                                                    Ycord = j;
                                                    Zcord = k;
                                                    Acord = l;
                                                    Bcord = m;
                                                    Ccord = n;
                                                    Dcord = a;
                                                    Ecord = b;
                                                    Fcord = c;
                                                    Gcord = d;
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = Ecord;
        importantValues[8] = Fcord;
        importantValues[9] = Gcord;
        importantValues[10] = minCostValue;

        return importantValues;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelCity;
    private javax.swing.JLabel jLabelCompany;
    private javax.swing.JLabel jLabelCompany1;
    private javax.swing.JLabel jLabelCost;
    private javax.swing.JLabel jLabelCost1;
    private javax.swing.JLabel jLabelCountry;
    private javax.swing.JLabel jLabelDuration;
    private javax.swing.JLabel jLabelIdNumber4;
    private javax.swing.JLabel jLabelIdNumber5;
    private javax.swing.JLabel jLabelLink;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelQuality;
    private javax.swing.JLabel jLabelQualÄ±ty;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelUserId;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelInfo4;
    private javax.swing.JPanel jPanelInfo5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    private void secontinitComponent() {

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
    }

    private void calculateTotalAmounts() {

        String totalcostservice = "";
        String totaltcost = "";

        int totalrow = jTable2.getRowCount();
        int i = 0;
        int totalc = 0;
        while (i <= totalrow - 1) {
            String totalcostString = jTable2.getModel().getValueAt(i, 4).toString();
            totalc += Integer.parseInt(totalcostString);
            totalcostservice = totalc + "";
            jLabel1.setText("Services Cost : " + totalcostservice + " SEK");
            i = i + 2;
        }

        int j = 1;
        int totaltc = 0;
        while (j < totalrow) {

            String totalcostString = jTable2.getModel().getValueAt(j, 1).toString();
            totaltc += Integer.parseInt(totalcostString);
            totaltcost = totaltc + "";
            jLabel2.setText("Transportations Cost : " + totaltcost + " SEK");
            j = j + 2;
        }
        String totall = (Integer.parseInt(totalcostservice)) + (Integer.parseInt(totaltcost)) + "";
        jLabel3.setText("Total Cost : " + totall + " SEK");

    }

}
