/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package User;

import static User.ServiceMarket.jLabelUserId;
import static User.ServiceMarketAuto.unitValue;
import com.sun.javafx.webkit.theme.Renderer;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URI;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author Erol
 */
public class OrderView extends javax.swing.JPanel {

    private Connection conn = null;
    private final String url = "jdbc:mysql://localhost:3306/";
    private final String dbName = "database";
    private final String driver = "com.mysql.jdbc.Driver";
    private final String userName = "root";
    private final String password = "Amureeha";
    private ResultSet res;
    public String databaseTable = "select * from service";
    public DefaultTableModel table;

    /**
     * Creates new form ServiceMarketAuto
     */
    public OrderView() {
        initComponents();
        secontinitComponent();
        // LabelAnimation.setVisible(false);
        dbConnection();

    }

    public Statement startConnection() throws Exception {
        Class.forName(driver).newInstance();
        conn = DriverManager.getConnection(url + dbName, userName, password);
        return conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    }

    public Statement startConnection(String dbName) throws Exception {
        Class.forName(driver).newInstance();
        conn = DriverManager.getConnection(url + dbName, userName, password);
        return conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    }

    public void stopConnection() throws Exception {
        conn.close();
        dbConnection();
        fillServiceList();
    }

    public void dbConnection() {
        Statement st;
        try {

            st = startConnection();
            res = st.executeQuery(databaseTable);

        } catch (Exception ex) {
            JOptionPane.showConfirmDialog(null, "DataBaseConnection Error", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
        }
    }

    public void fillServiceList() {

        DefaultListModel m = new DefaultListModel();
        m.addElement("All");

        try {
            PreparedStatement pst = conn.prepareStatement("Select * from database.service group by type");
            res = pst.executeQuery();

            while (res.next()) {
                String services = res.getString("type");
                m.addElement(services);
            }
            jList1.setModel(m);

        } catch (Exception e) {
            JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex)
            {
                return false;
            }

            public Component prepareRenderer(TableCellRenderer renderer,int Index_row, int Index_col) {
                Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
                //even index, selected or not selected

                if(isCellSelected(Index_row, Index_col)){
                    comp.setBackground(Color.orange);
                }

                else if  (  Index_row % 2 == 0 ) {
                    comp.setBackground(Color.lightGray);
                }
                else {
                    comp.setBackground(Color.getHSBColor( 0xF5, 0xF5, 0xF5));
                }
                return comp;
            }

        }
        ;
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jPanelInfo4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabelIdNumber4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabelType = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabelCost = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabelDuration = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabelQualÄ±ty = new javax.swing.JLabel();
        jLabelQuality = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabelCompany = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabelCountry = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabelCity = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabelLink = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanelInfo5 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabelIdNumber5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabelCost1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jLabelCompany1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Services Type", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jList1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Number", "Type", "Name", "Cost", "Duration", "Quality", "Company", "Country", "City"
            }
        ));
        jTable2.setEditingColumn(0);
        jTable2.setEditingRow(0);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jList2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Service ID", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jScrollPane4.setViewportView(jList2);

        jPanelInfo4.setBackground(new java.awt.Color(204, 204, 204));
        jPanelInfo4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        jPanel9.setBackground(new java.awt.Color(153, 153, 255));
        jPanel9.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel9.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/id.png"))); // NOI18N
        jLabel6.setText("Id Number");

        jLabelIdNumber4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelIdNumber4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 213, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jLabelIdNumber4)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));
        jPanel3.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel3.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/type.png"))); // NOI18N
        jLabel21.setText("Type");

        jLabelType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jLabelType))
                .addGap(0, 239, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelType)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(153, 153, 255));
        jPanel4.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel4.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/license1.png"))); // NOI18N
        jLabel24.setText("Name");

        jLabelName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel24)
                .addGap(0, 236, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelName)
                .addContainerGap())
        );

        jPanel15.setBackground(new java.awt.Color(235, 195, 27));
        jPanel15.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel15.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/price4.png"))); // NOI18N
        jLabel13.setText("Cost");

        jLabelCost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(0, 241, Short.MAX_VALUE))
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCost)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCost)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(235, 195, 27));
        jPanel1.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel1.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/clock4.png"))); // NOI18N
        jLabel14.setText("Duration");

        jLabelDuration.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addGap(0, 222, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDuration)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDuration)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(235, 195, 27));
        jPanel10.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel10.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelQualÄ±ty.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/five19.png"))); // NOI18N
        jLabelQualÄ±ty.setText("Quality");

        jLabelQuality.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabelQualÄ±ty)
                .addGap(0, 229, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelQuality)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabelQualÄ±ty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelQuality)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(0, 204, 102));
        jPanel11.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel11.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/factory6.png"))); // NOI18N
        jLabel16.setText("Company");

        jLabelCompany.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addGap(0, 218, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCompany)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCompany)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(0, 204, 102));
        jPanel12.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel12.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/world91.png"))); // NOI18N
        jLabel17.setText("Country");

        jLabelCountry.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(0, 224, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCountry)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCountry)
                .addContainerGap())
        );

        jPanel13.setBackground(new java.awt.Color(0, 204, 102));
        jPanel13.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel13.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/city8.png"))); // NOI18N
        jLabel18.setText("City");

        jLabelCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jLabel18)
                .addGap(0, 208, Short.MAX_VALUE))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCity)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabelCity)
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(153, 153, 153));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/link5.png"))); // NOI18N
        jLabel19.setText("Link");

        jLabelLink.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Support/Icons/service/go.png"))); // NOI18N
        jButton2.setText("Go to Service");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addComponent(jLabelLink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelLink)
                .addContainerGap())
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel19)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelInfo4Layout = new javax.swing.GroupLayout(jPanelInfo4);
        jPanelInfo4.setLayout(jPanelInfo4Layout);
        jPanelInfo4Layout.setHorizontalGroup(
            jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelInfo4Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInfo4Layout.createSequentialGroup()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInfo4Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelInfo4Layout.setVerticalGroup(
            jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInfo4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setText("Clear");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jPanelInfo5.setBackground(new java.awt.Color(204, 204, 204));
        jPanelInfo5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        jPanel16.setBackground(new java.awt.Color(153, 153, 255));
        jPanel16.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel16.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelIdNumber5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Services Cost : -");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabelIdNumber5)
                        .addGap(0, 243, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addGap(0, 8, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIdNumber5))
                .addContainerGap())
        );

        jPanel17.setBackground(new java.awt.Color(235, 195, 27));
        jPanel17.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel17.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelCost1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Transportations Cost : -");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabelCost1)
                        .addGap(0, 243, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCost1)
                .addContainerGap())
        );

        jPanel19.setBackground(new java.awt.Color(0, 204, 102));
        jPanel19.setMaximumSize(new java.awt.Dimension(170, 55));
        jPanel19.setPreferredSize(new java.awt.Dimension(170, 55));

        jLabelCompany1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Total Cost : -");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabelCompany1)
                        .addGap(0, 243, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCompany1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelInfo5Layout = new javax.swing.GroupLayout(jPanelInfo5);
        jPanelInfo5.setLayout(jPanelInfo5Layout);
        jPanelInfo5Layout.setHorizontalGroup(
            jPanelInfo5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfo5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelInfo5Layout.setVerticalGroup(
            jPanelInfo5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfo5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInfo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelInfo5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInfo5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanelInfo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    DefaultListModel listModel2 = new DefaultListModel();


    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked

        if (evt.getClickCount() == 2) {
            String selectedService = jList1.getSelectedValue().toString();

            DefaultListModel listModel = new DefaultListModel();

            jList2.setModel(listModel);

            if (selectedService.equals("All")) {

                String sql1 = "select * from database.service";

                try {
                    PreparedStatement psta = conn.prepareStatement(sql1);

                    res = psta.executeQuery();

                    while (res.next()) {
                        String idnumber = res.getString("idnumber");
//                        String link = res.getString("link");
//                        String type = res.getString("type");
//                        String name = res.getString("name");
//                        String cost = res.getString("cost");
//                        String duration = res.getString("duration");
//                        String quality = res.getString("quality");
//                        String company = res.getString("company");
//                        String country = res.getString("country");
//                        String city = res.getString("city");
//                        String locationFactor = res.getString("locationfactor");
                        listModel.addElement(idnumber);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
                }

            } else {

                String sql = "select * from service where type =?";
                try {
                    PreparedStatement pst = conn.prepareStatement(sql);
                    pst.setString(1, selectedService);
                    res = pst.executeQuery();

                    while (res.next()) {
                        String idnumber = res.getString("idnumber");
//                        String link = res.getString("link");
//                        String type = res.getString("type");
//                        String name = res.getString("name");
//                        String cost = res.getString("cost");
//                        String duration = res.getString("duration");
//                        String quality = res.getString("quality");
//                        String company = res.getString("company");
//                        String country = res.getString("country");
//                        String city = res.getString("city");
//                        String locationFactor = res.getString("locationfactor");
                        listModel.addElement(idnumber);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
                }
            }

        }


    }//GEN-LAST:event_jList1MouseClicked

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {

        if (evt.getClickCount() == 2) {

            String selectedService = jList2.getSelectedValue().toString();
//            listModel2.removeElement(selectedService);
//            jList2.setModel(listModel2);

            table = (DefaultTableModel) jTable2.getModel();
            jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jTable2.setRowSelectionAllowed(true);
            jTable2.setFocusable(false);

            int rowNumber = jTable2.getRowCount();

            if (1 == 1) {

                int cordinate = 0;
                try {

//                    ArrayList idList1 = new ArrayList();
//                    ArrayList locFacList1 = new ArrayList();
//                    ArrayList costList1 = new ArrayList();
//                    ArrayList costAndLocfacList1 = new ArrayList();
//                    ArrayList cityList1 = new ArrayList();
//                    ArrayList qualityList1 = new ArrayList();
//                    ArrayList durationList1 = new ArrayList();
                    PreparedStatement pst = conn.prepareStatement("Select * from database.service where idnumber='" + selectedService + "'");
                    res = pst.executeQuery();

                    String currentCity;

                    while (res.next()) {
                        String idnumber = res.getString("idnumber");
                        String link = res.getString("link");
                        String type = res.getString("type");
                        String name = res.getString("name");
                        String cost = res.getString("cost");
                        String duration = res.getString("duration");
                        String quality = res.getString("quality");
                        String company = res.getString("company");
                        String country = res.getString("country");
                        currentCity = res.getString("city");
                        String locationFactor = res.getString("locationfactor");

                        if (rowNumber <= 0) {
                            table.addRow(new Object[]{idnumber, type, name, cost, duration, quality, company, country, currentCity});
                        } else if (rowNumber > 0) {

//                            int LF1 = (int) table.getValueAt(table.getRowCount(), 9);
                            int IndexNumber = (jTable2.getModel().getRowCount()) - 1;
                            String cityBefore = jTable2.getModel().getValueAt(IndexNumber, 8).toString();

                            String transport1 = "SELECT * FROM database.transportation where (startDestination = '" + currentCity + "'" + " or startDestination = '" + cityBefore + "') and (nextDestination = '" + currentCity + "' or"
                                    + " nextDestination = '" + cityBefore + "')";
                            PreparedStatement pst1 = conn.prepareStatement(transport1);
                            ResultSet res1 = pst1.executeQuery();

                            while (res1.next()) {
                                String transportationId = res1.getString("transportationId");
                                String transportationCost = res1.getString("transportationCost");
                                String startDestination = res1.getString("startDestination");
                                String nextDestination = res1.getString("nextDestination");
                                String Destination = startDestination + " / " + nextDestination;
                                String caps = "------Â¤------";
                                String type1 = res1.getString("type");

                                table.addRow(new Object[]{transportationId, type1, Destination, transportationCost, caps, caps, caps, caps, caps, caps});
                            }

                            table.addRow(new Object[]{idnumber, type, name, cost, duration, quality, company, country, currentCity});

                        }
                    }

//                    for (int i = 0; i < costList1.size(); i++) {
//                        int sumValue = (Integer.parseInt(locFacList1.get(i).toString()) * unitValue) + Integer.parseInt(costList1.get(i).toString());
//                        costAndLocfacList1.add(sumValue);
//                    }
//
//                    int runingValue = 0;
//                    int minCostValue = 100000000;
//
//                    for (int i = 0; i < costAndLocfacList1.size(); i++) {
//
//                        runingValue = Integer.parseInt(costAndLocfacList1.get(i).toString());
//                        if (runingValue != 0 && minCostValue > runingValue) {
//                            minCostValue = runingValue;
//                            cordinate = i;
//
//                        }
//                    }
//
//                    for (int i = 0; i < ElementCount; i++) {
//                        Object obj = jList2.getModel().getElementAt(i);
//                        elementsItems.add(obj.toString());
//                    }
//                    String type1 = elementsItems.get(0).toString();
//
//                    if (jRadioButton1.isSelected()) {
//                        int idvalue = Integer.parseInt(idList1.get(cordinate).toString());
//                        PreparedStatement pst1 = conn.prepareStatement("Select * from database.service where idnumber='" + idvalue + "'");
//                        res = pst1.executeQuery();
//                    }
//
//                    int i = 0;
//
//                    while (res.next()) {
//                        String idnumber = res.getString("idnumber");
//                        String link = res.getString("link");
//                        String type = res.getString("type");
//                        String name = res.getString("name");
//                        String cost = res.getString("cost");
//                        String duration = res.getString("duration");
//                        String quality = res.getString("quality");
//                        String company = res.getString("company");
//                        String country = res.getString("country");
//                        String city = res.getString("city");
//                        String locationFactor = res.getString("locationfactor");
//                        //table.addRow(new Object[]{idnumber, type, name, cost, duration, quality, company, country, city, locationFactor});
//                        table.addRow(new Object[]{idnumber, type, name, cost, duration, quality, company, country, city, locationFactor});
//                        i++;
//                        if (i == 1) {
//                            break;
//                        }
//
//                    }

                } catch (Exception e) {
                    JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
                }
            }

        }
    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        fillServiceList();
    }//GEN-LAST:event_formMouseEntered


    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        table.setRowCount(0);
        listModel2.clear();

        jLabel1.setText("Services Cost : -");
        jLabel2.setText("Transportations Cost : -");
        jLabel3.setText("Total Cost : -");
    }//GEN-LAST:event_jButton5MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked

        int sr = jTable2.getSelectedRow();
        String serviceId = "";
        String query = "";
        try {
            if (sr % 2 == 0) {
                query = "select * from database.service where idnumber = ?";
                int r = jTable2.getSelectedRow();
                //        int c = jTable1.getSelectedColumn();
                serviceId = jTable2.getModel().getValueAt(r, 0).toString();

                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, serviceId);
                res = pst.executeQuery();

                while (res.next()) {
                    String idnumber = res.getString("idnumber");
                    String link = res.getString("link");
                    String type = res.getString("type");
                    String name = res.getString("name");
                    String cost = res.getString("cost");
                    String duration = res.getString("duration");
                    String quality = res.getString("quality");
                    String company = res.getString("company");
                    String country = res.getString("country");
                    String city = res.getString("city");
                    String locationFactor = res.getString("locationfactor");

                    jLabelIdNumber4.setText(idnumber);
                    jLabelType.setText(type);
                    jLabelName.setText(name);
                    jLabelCost.setText(cost);
                    jLabelDuration.setText(duration);
                    jLabelQuality.setText(quality);
                    jLabelCompany.setText(company);
                    jLabelCountry.setText(country);
                    jLabelCity.setText(city);
                    jLabelLink.setText(link);
                }
            } else {
                query = "select * from database.transportation where transportationId = ?";
                int r = jTable2.getSelectedRow();
                //        int c = jTable1.getSelectedColumn();
                serviceId = jTable2.getModel().getValueAt(r, 0).toString();

                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, serviceId);
                res = pst.executeQuery();

                while (res.next()) {
                    String idnumber = res.getString("transportationId");
//                    String link = res.getString("link");
//                    String type = res.getString("type");
//                    String name = res.getString("name");
//                    String cost = res.getString("cost");
//                    String duration = res.getString("duration");
//                    String quality = res.getString("quality");
//                    String company = res.getString("company");
//                    String country = res.getString("country");
//                    String city = res.getString("city");
//                    String locationFactor = res.getString("locationfactor");

                    jLabelIdNumber4.setText(idnumber);
//                    jLabelType.setText(type);
//                    jLabelName.setText(name);
//                    jLabelCost.setText(cost);
//                    jLabelDuration.setText(duration);
//                    jLabelQuality.setText(quality);
//                    jLabelCompany.setText(company);
//                    jLabelCountry.setText(country);
//                    jLabelCity.setText(city);
//                    jLabelLink.setText(link);
                }
            }

        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Service List Could not be Created", "MySQL Connection", JOptionPane.PLAIN_MESSAGE);
        }


    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {

            int rownumber = jTable2.getRowCount();
            int status = 0;
            int orderid = 0;
            String userid = jLabelUserId.getText();

            boolean isAvailable = true;
            while (isAvailable) {
                Random rand = new Random();
                int n = rand.nextInt(100000) + 1;
                orderid = n;

                String serialnoQuery = "SELECT * FROM database.order where orderid='" + orderid + "'";
                PreparedStatement pst1 = conn.prepareStatement(serialnoQuery);
                ResultSet res1 = pst1.executeQuery();
                while (!res1.next()) {
                    isAvailable = false;
                    break;

                }
            }

            for (int i = 0; i < rownumber; i++) {
                String serviceidString = jTable2.getModel().getValueAt(i, 0).toString();//"servis Id" aliniyor
                int serviceid = Integer.parseInt(serviceidString);

                Statement st = startConnection();
                String sql = "INSERT INTO database.order (userid, orderid, serviceid ) "
                        + "VALUES (" + "'" + userid + "'" + ","
                        + "'" + orderid + "'" + ","
                        + "'" + serviceid + "'" + ")";
                System.out.println(sql);
                st.executeUpdate(sql);
            }

            JOptionPane.showMessageDialog(null, "Transaction Success. ", "Order Information", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Transaction Unsuccess.", "Order Information", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String link = jLabelLink.getText();
        String address = "http://www." + link + ".com";

        try {
            URI uri = new URI(link);
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().browse(uri);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public int[] calculateMin2(ArrayList a1, ArrayList a2) {
        int[][] mix = new int[10][10];
        int[] importantValues = new int[3];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {

                int val1 = Integer.parseInt(a1.get(i).toString());
                int val2 = Integer.parseInt(a2.get(j).toString());
                mix[i][j] = val1 * val2;
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                runingValue = mix[i][j];
                if (runingValue != 0 && minCostValue > runingValue) {
                    minCostValue = runingValue;
                    Xcord = i;
                    Ycord = j;
                }

            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = minCostValue;

        return importantValues;

    }

    public int[] calculateMin3(ArrayList a1, ArrayList a2, ArrayList a3) {

        int[][][] mix = new int[10][10][10];
        int[] importantValues = new int[4];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    int val1 = Integer.parseInt(a1.get(i).toString());
                    int val2 = Integer.parseInt(a2.get(j).toString());
                    int val3 = Integer.parseInt(a3.get(k).toString());
                    mix[i][j][k] = val1 * val2 * val3;
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    runingValue = mix[i][j][k];
                    if (runingValue != 0 && minCostValue > runingValue) {
                        minCostValue = runingValue;
                        Xcord = i;
                        Ycord = j;
                        Zcord = k;
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = minCostValue;

        return importantValues;

    }

    private int[] calculateMin4(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4) {
        int[][][][] mix = new int[10][10][10][10];
        int[] importantValues = new int[5];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        int val1 = Integer.parseInt(a1.get(i).toString());
                        int val2 = Integer.parseInt(a2.get(j).toString());
                        int val3 = Integer.parseInt(a3.get(k).toString());
                        int val4 = Integer.parseInt(a4.get(l).toString());
                        mix[i][j][k][l] = val1 * val2 * val3 * val4;
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        runingValue = mix[i][j][k][l];
                        if (runingValue != 0 && minCostValue > runingValue) {
                            minCostValue = runingValue;
                            Xcord = i;
                            Ycord = j;
                            Zcord = k;
                            Acord = l;
                        }
                    }

                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin5(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5) {
        int[][][][][] mix = new int[10][10][10][10][10];
        int[] importantValues = new int[6];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            int val1 = Integer.parseInt(a1.get(i).toString());
                            int val2 = Integer.parseInt(a2.get(j).toString());
                            int val3 = Integer.parseInt(a3.get(k).toString());
                            int val4 = Integer.parseInt(a4.get(l).toString());
                            int val5 = Integer.parseInt(a5.get(m).toString());
                            mix[i][j][k][l][m] = val1 * val2 * val3 * val4 * val5;
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            runingValue = mix[i][j][k][l][m];
                            if (runingValue != 0 && minCostValue > runingValue) {
                                minCostValue = runingValue;
                                Xcord = i;
                                Ycord = j;
                                Zcord = k;
                                Acord = l;
                                Bcord = m;
                            }
                        }
                    }

                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin6(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6) {
        int[][][][][][] mix = new int[10][10][10][10][10][10];
        int[] importantValues = new int[7];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                int val1 = Integer.parseInt(a1.get(i).toString());
                                int val2 = Integer.parseInt(a2.get(j).toString());
                                int val3 = Integer.parseInt(a3.get(k).toString());
                                int val4 = Integer.parseInt(a4.get(l).toString());
                                int val5 = Integer.parseInt(a5.get(m).toString());
                                int val6 = Integer.parseInt(a6.get(n).toString());
                                mix[i][j][k][l][m][n] = val1 * val2 * val3 * val4 * val5 * val6;
                            }
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                runingValue = mix[i][j][k][l][m][n];
                                if (runingValue != 0 && minCostValue > runingValue) {
                                    minCostValue = runingValue;
                                    Xcord = i;
                                    Ycord = j;
                                    Zcord = k;
                                    Acord = l;
                                    Bcord = m;
                                    Ccord = n;
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin7(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7) {
        int[][][][][][][] mix = new int[10][10][10][10][10][10][10];
        int[] importantValues = new int[8];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    int val1 = Integer.parseInt(a1.get(i).toString());
                                    int val2 = Integer.parseInt(a2.get(j).toString());
                                    int val3 = Integer.parseInt(a3.get(k).toString());
                                    int val4 = Integer.parseInt(a4.get(l).toString());
                                    int val5 = Integer.parseInt(a5.get(m).toString());
                                    int val6 = Integer.parseInt(a6.get(n).toString());
                                    int val7 = Integer.parseInt(a7.get(a).toString());
                                    mix[i][j][k][l][m][n][a] = val1 * val2 * val3 * val4 * val5 * val6 * val7;
                                }
                            }
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    runingValue = mix[i][j][k][l][m][n][a];
                                    if (runingValue != 0 && minCostValue > runingValue) {
                                        minCostValue = runingValue;
                                        Xcord = i;
                                        Ycord = j;
                                        Zcord = k;
                                        Acord = l;
                                        Bcord = m;
                                        Ccord = n;
                                        Dcord = a;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = minCostValue;

        return importantValues;
    }

    private int[] calculateMin8(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7, ArrayList a8) {
        int[][][][][][][][] mix = new int[10][10][10][10][10][10][10][10];
        int[] importantValues = new int[9];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    for (int b = 0; b < a8.size(); b++) {
                                        int val1 = Integer.parseInt(a1.get(i).toString());
                                        int val2 = Integer.parseInt(a2.get(j).toString());
                                        int val3 = Integer.parseInt(a3.get(k).toString());
                                        int val4 = Integer.parseInt(a4.get(l).toString());
                                        int val5 = Integer.parseInt(a5.get(m).toString());
                                        int val6 = Integer.parseInt(a6.get(n).toString());
                                        int val7 = Integer.parseInt(a7.get(a).toString());
                                        int val8 = Integer.parseInt(a8.get(b).toString());
                                        mix[i][j][k][l][m][n][a][b] = val1 * val2 * val3 * val4 * val5 * val6 * val7 * val8;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        int runingValue = 0;
        int minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;
        int Ecord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    for (int b = 0; b < mix[7].length; b++) {
                                        runingValue = mix[i][j][k][l][m][n][a][b];
                                        if (runingValue != 0 && minCostValue > runingValue) {
                                            minCostValue = runingValue;
                                            Xcord = i;
                                            Ycord = j;
                                            Zcord = k;
                                            Acord = l;
                                            Bcord = m;
                                            Ccord = n;
                                            Dcord = a;
                                            Ecord = b;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = Ecord;
        importantValues[8] = minCostValue;

        return importantValues;
    }

    private double[] calculateMin9(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7, ArrayList a8, ArrayList a9) {
        double[][][][][][][][][] mix = new double[7][7][7][7][7][7][7][7][7];
        double[] importantValues = new double[10];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    for (int b = 0; b < a8.size(); b++) {
                                        for (int c = 0; c < a9.size(); c++) {
                                            int val1 = Integer.parseInt(a1.get(i).toString());
                                            int val2 = Integer.parseInt(a2.get(j).toString());
                                            int val3 = Integer.parseInt(a3.get(k).toString());
                                            int val4 = Integer.parseInt(a4.get(l).toString());
                                            int val5 = Integer.parseInt(a5.get(m).toString());
                                            int val6 = Integer.parseInt(a6.get(n).toString());
                                            int val7 = Integer.parseInt(a7.get(a).toString());
                                            int val8 = Integer.parseInt(a8.get(b).toString());
                                            int val9 = Integer.parseInt(a9.get(c).toString());
                                            mix[i][j][k][l][m][n][a][b][c] = val1 * val2 * val3 * val4 * val5 * val6 * val7 * val8 * val9;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        double runingValue = 0;
        double minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;
        int Ecord = 0;
        int Fcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    for (int b = 0; b < mix[7].length; b++) {
                                        for (int c = 0; c < mix[8].length; c++) {
                                            runingValue = mix[i][j][k][l][m][n][a][b][c];
                                            if (runingValue != 0 && minCostValue > runingValue) {
                                                minCostValue = runingValue;
                                                Xcord = i;
                                                Ycord = j;
                                                Zcord = k;
                                                Acord = l;
                                                Bcord = m;
                                                Ccord = n;
                                                Dcord = a;
                                                Ecord = b;
                                                Fcord = c;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = Ecord;
        importantValues[8] = Fcord;
        importantValues[9] = minCostValue;

        return importantValues;
    }

    private double[] calculateMin10(ArrayList a1, ArrayList a2, ArrayList a3, ArrayList a4, ArrayList a5, ArrayList a6, ArrayList a7, ArrayList a8, ArrayList a9, ArrayList a10) {
        double[][][][][][][][][][] mix = new double[5][5][5][5][5][5][5][5][5][5];
        double[] importantValues = new double[11];

        for (int i = 0; i < a1.size(); i++) {
            for (int j = 0; j < a2.size(); j++) {
                for (int k = 0; k < a3.size(); k++) {
                    for (int l = 0; l < a4.size(); l++) {
                        for (int m = 0; m < a5.size(); m++) {
                            for (int n = 0; n < a6.size(); n++) {
                                for (int a = 0; a < a7.size(); a++) {
                                    for (int b = 0; b < a8.size(); b++) {
                                        for (int c = 0; c < a9.size(); c++) {
                                            for (int d = 0; d < a10.size(); d++) {
                                                int val1 = Integer.parseInt(a1.get(i).toString());
                                                int val2 = Integer.parseInt(a2.get(j).toString());
                                                int val3 = Integer.parseInt(a3.get(k).toString());
                                                int val4 = Integer.parseInt(a4.get(l).toString());
                                                int val5 = Integer.parseInt(a5.get(m).toString());
                                                int val6 = Integer.parseInt(a6.get(n).toString());
                                                int val7 = Integer.parseInt(a7.get(a).toString());
                                                int val8 = Integer.parseInt(a8.get(b).toString());
                                                int val9 = Integer.parseInt(a9.get(c).toString());
                                                int val10 = Integer.parseInt(a10.get(d).toString());
                                                mix[i][j][k][l][m][n][a][b][c][d] = val1 * val2 * val3 * val4 * val5 * val6 * val7 * val8 * val9 * val10;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        double runingValue = 0;
        double minCostValue = 100000000;
        int Xcord = 0;
        int Ycord = 0;
        int Zcord = 0;
        int Acord = 0;
        int Bcord = 0;
        int Ccord = 0;
        int Dcord = 0;
        int Ecord = 0;
        int Fcord = 0;
        int Gcord = 0;

        for (int i = 0; i < mix[0].length; i++) {
            for (int j = 0; j < mix[1].length; j++) {
                for (int k = 0; k < mix[2].length; k++) {
                    for (int l = 0; l < mix[3].length; l++) {
                        for (int m = 0; m < mix[4].length; m++) {
                            for (int n = 0; n < mix[5].length; n++) {
                                for (int a = 0; a < mix[6].length; a++) {
                                    for (int b = 0; b < mix[7].length; b++) {
                                        for (int c = 0; c < mix[8].length; c++) {
                                            for (int d = 0; d < 10; d++) {
                                                runingValue = mix[i][j][k][l][m][n][a][b][c][d];
                                                if (runingValue != 0 && minCostValue > runingValue) {
                                                    minCostValue = runingValue;
                                                    Xcord = i;
                                                    Ycord = j;
                                                    Zcord = k;
                                                    Acord = l;
                                                    Bcord = m;
                                                    Ccord = n;
                                                    Dcord = a;
                                                    Ecord = b;
                                                    Fcord = c;
                                                    Gcord = d;
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        importantValues[0] = Xcord;
        importantValues[1] = Ycord;
        importantValues[2] = Zcord;
        importantValues[3] = Acord;
        importantValues[4] = Bcord;
        importantValues[5] = Ccord;
        importantValues[6] = Dcord;
        importantValues[7] = Ecord;
        importantValues[8] = Fcord;
        importantValues[9] = Gcord;
        importantValues[10] = minCostValue;

        return importantValues;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelCity;
    private javax.swing.JLabel jLabelCompany;
    private javax.swing.JLabel jLabelCompany1;
    private javax.swing.JLabel jLabelCost;
    private javax.swing.JLabel jLabelCost1;
    private javax.swing.JLabel jLabelCountry;
    private javax.swing.JLabel jLabelDuration;
    private javax.swing.JLabel jLabelIdNumber4;
    private javax.swing.JLabel jLabelIdNumber5;
    private javax.swing.JLabel jLabelLink;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelQuality;
    private javax.swing.JLabel jLabelQualÄ±ty;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelInfo4;
    private javax.swing.JPanel jPanelInfo5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    private void secontinitComponent() {

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
    }

    private void calculateTotalAmounts() {

        String totalcostservice = "";
        String totaltcost = "";

        int totalrow = jTable2.getRowCount();
        int i = 0;
        int totalc = 0;
        while (i <= totalrow - 1) {
            String totalcostString = jTable2.getModel().getValueAt(i, 4).toString();
            totalc += Integer.parseInt(totalcostString);
            totalcostservice = totalc + "";
            jLabel1.setText("Services Cost : " + totalcostservice + " SEK");
            i = i + 2;
        }

        int j = 1;
        int totaltc = 0;
        while (j < totalrow) {

            String totalcostString = jTable2.getModel().getValueAt(j, 1).toString();
            totaltc += Integer.parseInt(totalcostString);
            totaltcost = totaltc + "";
            jLabel2.setText("Transportations Cost : " + totaltcost + " SEK");
            j = j + 2;
        }
        String totall = (Integer.parseInt(totalcostservice)) + (Integer.parseInt(totaltcost)) + "";
        jLabel3.setText("Total Cost : " + totall + " SEK");

    }

}
